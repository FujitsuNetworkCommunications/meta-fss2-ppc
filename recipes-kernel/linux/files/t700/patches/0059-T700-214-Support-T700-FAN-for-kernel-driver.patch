From 2b67e67ffefcfcdcfe9f636fdedd6a5f2af8a6f1 Mon Sep 17 00:00:00 2001
From: aken_liu <aken_liu@accton.com.tw>
Date: Wed, 4 Mar 2020 18:29:20 +0800
Subject: [PATCH] T700-214: Support T700 FAN for kernel driver Add T700 fan
 driver

---
 drivers/hwmon/Kconfig           |  10 +-
 drivers/hwmon/Makefile          |   1 +
 drivers/hwmon/accton_t700_fan.c | 733 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 743 insertions(+), 1 deletion(-)
 create mode 100644 drivers/hwmon/accton_t700_fan.c

diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index 98a42f1..c6222bc 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -82,7 +82,7 @@ config SENSORS_ABITUGURU3
 	  will be called abituguru3.
 
 config SENSORS_ACCTON_T600_CPLD
-	tristate "Accton t600 cpld"
+	tristate "Accton T600 cpld"
 	depends on I2C
 	help
 	  If you say yes here you get support for Accton t600 cpld.
@@ -97,6 +97,14 @@ config SENSORS_ACCTON_T600_FAN
 	  This driver can also be built as a module. If so, the module will
 	  be called accton_t600_fan.
 
+config SENSORS_ACCTON_T700_FAN
+	tristate "Accton T700 fan"
+	depends on I2C
+	help
+	  If you say yes here you get support for Accton T700 fan.
+	  This driver can also be built as a module. If so, the module will
+	  be called accton_t700_fan.
+
 config SENSORS_AD7314
 	tristate "Analog Devices AD7314 and compatibles"
 	depends on SPI
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index e3cdd72..a63fcb0 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -24,6 +24,7 @@ obj-$(CONFIG_SENSORS_ABITUGURU)	+= abituguru.o
 obj-$(CONFIG_SENSORS_ABITUGURU3)+= abituguru3.o
 obj-$(CONFIG_SENSORS_ACCTON_T600_CPLD) += accton_t600_cpld.o
 obj-$(CONFIG_SENSORS_ACCTON_T600_FAN)  += accton_t600_fan.o
+obj-$(CONFIG_SENSORS_ACCTON_T700_FAN)  += accton_t700_fan.o
 obj-$(CONFIG_SENSORS_AD7314)	+= ad7314.o
 obj-$(CONFIG_SENSORS_AD7414)	+= ad7414.o
 obj-$(CONFIG_SENSORS_AD7418)	+= ad7418.o
diff --git a/drivers/hwmon/accton_t700_fan.c b/drivers/hwmon/accton_t700_fan.c
new file mode 100644
index 0000000..236f142
--- /dev/null
+++ b/drivers/hwmon/accton_t700_fan.c
@@ -0,0 +1,733 @@
+/*
+ * A hwmon driver for the Accton act fan cpld
+ *
+ * Copyright (C) 2014 Accton Technology Corporation.
+ * Roy Chuang <roy_chuang@edge-core.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/jiffies.h>
+#include <linux/i2c.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/err.h>
+#include <linux/mutex.h>
+#include <linux/sysfs.h>
+#include <linux/slab.h>
+#include <linux/delay.h>  //msleep
+
+#define DRVNAME "t700_fan"
+
+enum accton_fan_type {
+    t700_fan10,
+    t700_fan12,
+};
+
+/* Fan speed control related data
+ */
+enum fan_duty_cycle {
+	FAN_DUTY_CYCLE_50_CPLD_VAL  = 0x7,
+	FAN_DUTY_CYCLE_63_CPLD_VAL  = 0x9,
+	FAN_DUTY_CYCLE_75_CPLD_VAL  = 0xB,
+	FAN_DUTY_CYCLE_87_CPLD_VAL  = 0xD,
+	FAN_DUTY_CYCLE_MAX_CPLD_VAL = 0xF,
+	FAN_DUTY_CYCLE_DEFAULT  = FAN_DUTY_CYCLE_50_CPLD_VAL
+};
+
+static struct t700_fan_data *t700_fan_update_device(struct device *dev);
+static ssize_t fan_show_value(struct device *dev, struct device_attribute *da, char *buf);
+static ssize_t set_duty_cycle(struct device *dev, struct device_attribute *da,
+            const char *buf, size_t count);
+
+static ssize_t set_fan_bit(struct device *dev, struct device_attribute *da,
+            const char *buf, size_t count);
+static ssize_t t700_fan_blink(struct device *dev, struct device_attribute *da, const char *buf, size_t count);
+static ssize_t raw_access(struct device *dev, struct device_attribute *da,
+            const char *buf, size_t count);
+            
+/* fan related data, the index should match sysfs_fan_attributes */
+static const u8 fan_reg[] = {
+    0x01,      /* fan cpld version */
+    0x0F,      /* fan 1-6 present status */
+    0x10,      /* fan 1-6 direction(0:B2F 1:F2B) */
+    0x11,      /* fan PWM(for all fan) */
+    0x12,      /* inner fan 3-2 speed(rpm) */
+    0x13,      /* inner fan 3-1 speed(rpm) */
+    0x14,      /* inner fan 2-2 speed(rpm) */
+    0x15,      /* inner fan 2-1 speed(rpm) */
+    0x16,      /* inner fan 1-2 speed(rpm) */
+    0x17,      /* inner fan 1-1 speed(rpm) */
+    0x22,      /* outer fan 3-2 speed(rpm) */
+    0x23,      /* outer fan 3-1 speed(rpm) */
+    0x24,      /* outer fan 2-2 speed(rpm) */
+    0x25,      /* outer fan 2-1 speed(rpm) */
+    0x26,      /* outer fan 1-2 speed(rpm) */
+    0x27,      /* outer fan 1-2 speed(rpm) */
+    0x30,      /* fan power enable */
+    0x33,      /* fan watchdog */
+    0x42,      /* fan LED */
+    0x44,      /* fan LED blinking */
+    0x46,      /* fan control select */
+};
+
+/* Each client has this additional data */
+struct t700_fan_data {
+    struct device   *hwmon_dev;
+    struct mutex     update_lock;
+    char        valid;         /* != 0 if registers are valid */
+    char        temp_is_valid; /* != 0 if temperature are valid */
+    unsigned long   last_updated;   /* In jiffies */
+    u8      reg_val[ARRAY_SIZE(fan_reg)]; /* Register value */
+    const struct attribute_group *groups;
+};
+
+#define FAN_PRESENT_ATTR_ID(index)      FAN##index##_PRESENT
+#define FAN_ENABLE_ATTR_ID(index)       FAN##index##_ENABLE
+#define FAN_FAULT_ATTR_ID(index)        FAN##index##_FAULT
+#define FAN_1_I_INPUT_ATTR_ID(index)    FAN##index##_1_I_INPUT
+#define FAN_2_I_INPUT_ATTR_ID(index)    FAN##index##_2_I_INPUT
+#define FAN_1_O_INPUT_ATTR_ID(index)    FAN##index##_1_O_INPUT
+#define FAN_2_O_INPUT_ATTR_ID(index)    FAN##index##_2_O_INPUT
+#define FAN_DIRECTION_ATTR_ID(index)    FAN##index##_DIRECTION
+#define FAN_LED_BLINK_ATTR_ID(index)    FAN##index##_LED_BLINK
+
+enum fan_id {
+    FAN1_ID,
+    FAN2_ID,
+    FAN3_ID,
+    FAN4_ID,
+    FAN5_ID,
+    NUM_OF_FAN
+};
+enum sysfs_fan_attributes {
+    CPLD_VERSION,           /* fan cpld version */
+    FAN_PRESENT_REG,
+    FAN_DIRECTION_REG,
+    FAN_PWM1,               /* FAN PWM (for all fan) */ 
+    FAN_2_I_INPUT_ATTR_ID(3), /* front fan X speed(rpm) */
+    FAN_1_I_INPUT_ATTR_ID(3),
+    FAN_2_I_INPUT_ATTR_ID(2),
+    FAN_1_I_INPUT_ATTR_ID(2),
+    FAN_2_I_INPUT_ATTR_ID(1),
+    FAN_1_I_INPUT_ATTR_ID(1),
+    FAN_2_O_INPUT_ATTR_ID(3), /* rear fan X speed(rpm) */
+    FAN_1_O_INPUT_ATTR_ID(3),
+    FAN_2_O_INPUT_ATTR_ID(2),
+    FAN_1_O_INPUT_ATTR_ID(2),
+    FAN_2_O_INPUT_ATTR_ID(1),
+    FAN_1_O_INPUT_ATTR_ID(1),
+    FAN_ENABLE_REG,
+    FAN_WATCHDOG,
+    ACCESS,                 /* access cpld register */  
+    FAN_ENABLE_ATTR_ID(1),  /* FAN X control switch */
+    FAN_ENABLE_ATTR_ID(2),
+    FAN_ENABLE_ATTR_ID(3),
+    FAN_ENABLE_ATTR_ID(4),
+    FAN_ENABLE_ATTR_ID(5),
+    FAN_FAULT_ATTR_ID(1),   /* FAN X fault status */
+    FAN_FAULT_ATTR_ID(2),
+    FAN_FAULT_ATTR_ID(3),
+    FAN_FAULT_ATTR_ID(4),
+    FAN_FAULT_ATTR_ID(5),
+    FAN_PRESENT_ATTR_ID(1), /* fan X present */
+    FAN_PRESENT_ATTR_ID(2),
+    FAN_PRESENT_ATTR_ID(3),
+    FAN_PRESENT_ATTR_ID(4),
+    FAN_PRESENT_ATTR_ID(5),
+    FAN_DIRECTION_ATTR_ID(1), /* fan X direction*/
+    FAN_DIRECTION_ATTR_ID(2),
+    FAN_DIRECTION_ATTR_ID(3),
+    FAN_DIRECTION_ATTR_ID(4),
+    FAN_DIRECTION_ATTR_ID(5),
+    FAN_LED_BLINK_ATTR_ID(1),
+    FAN_LED_BLINK_ATTR_ID(2),
+    FAN_LED_BLINK_ATTR_ID(3),
+    FAN_LED_BLINK_ATTR_ID(4),
+    FAN_LED_BLINK_ATTR_ID(5),
+    FAN_CONT,
+};
+
+/* Define attributes */
+#define DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_fault, S_IRUGO, fan_show_value, NULL, FAN##index##_FAULT)
+#define DECLARE_FAN_FAULT_ATTR(index)     &sensor_dev_attr_fan##index##_fault.dev_attr.attr
+
+#define DECLARE_FAN_DIRECTION_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_direction, S_IRUGO, fan_show_value, NULL, FAN##index##_DIRECTION)
+#define DECLARE_FAN_DIRECTION_ATTR(index)  &sensor_dev_attr_fan##index##_direction.dev_attr.attr
+
+#define DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_present, S_IRUGO, fan_show_value, NULL, FAN##index##_PRESENT)
+#define DECLARE_FAN_PRESENT_ATTR(index)   &sensor_dev_attr_fan##index##_present.dev_attr.attr
+
+#define DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_1_i_input, S_IRUGO, fan_show_value, NULL, FAN##index##_1_I_INPUT);\
+    static SENSOR_DEVICE_ATTR(fan##index##_2_i_input, S_IRUGO, fan_show_value, NULL, FAN##index##_2_I_INPUT);\
+    static SENSOR_DEVICE_ATTR(fan##index##_1_o_input, S_IRUGO, fan_show_value, NULL, FAN##index##_1_O_INPUT);\
+    static SENSOR_DEVICE_ATTR(fan##index##_2_o_input, S_IRUGO, fan_show_value, NULL, FAN##index##_2_O_INPUT)
+#define DECLARE_FAN_SPEED_RPM_ATTR(index)  &sensor_dev_attr_fan##index##_1_i_input.dev_attr.attr, \
+	                               &sensor_dev_attr_fan##index##_2_i_input.dev_attr.attr, \
+	                               &sensor_dev_attr_fan##index##_1_o_input.dev_attr.attr, \
+                                       &sensor_dev_attr_fan##index##_2_o_input.dev_attr.attr
+
+static SENSOR_DEVICE_ATTR(cpld_version, S_IRUGO, fan_show_value, NULL, CPLD_VERSION);
+static SENSOR_DEVICE_ATTR(fan_watchdog, S_IWUSR | S_IRUGO, fan_show_value, set_fan_bit, FAN_WATCHDOG);
+static SENSOR_DEVICE_ATTR(raw_access, S_IWUSR | S_IRUGO, NULL, raw_access, ACCESS);
+static SENSOR_DEVICE_ATTR(fan_cont, S_IWUSR | S_IRUGO, fan_show_value, set_fan_bit, FAN_CONT);
+
+#define DECLARE_FAN_DUTY_CYCLE_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(pwm##index, S_IWUSR | S_IRUGO, fan_show_value, set_duty_cycle, FAN_PWM1)
+#define DECLARE_FAN_DUTY_CYCLE_ATTR(index) &sensor_dev_attr_pwm##index.dev_attr.attr
+
+/* fanX enable attribute */
+#define DECLARE_FAN_ENABLE_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_enable, S_IWUSR | S_IRUGO, fan_show_value, set_fan_bit, FAN##index##_ENABLE)
+#define DECLARE_FAN_ENABLE_ATTR(index)    &sensor_dev_attr_fan##index##_enable.dev_attr.attr
+
+#define DECLARE_FAN_LED_BLINK_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_led_blink, S_IWUSR, NULL, t700_fan_blink, FAN##index##_LED_BLINK)
+#define DECLARE_FAN_LED_BLINK_ATTR(index)    &sensor_dev_attr_fan##index##_led_blink.dev_attr.attr
+
+
+/* 3 fan fault attributes in this platform */
+DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(1);
+DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(2);
+DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(3);
+/* 3 fan direction attribute in this platform */
+DECLARE_FAN_DIRECTION_SENSOR_DEV_ATTR(1);  
+DECLARE_FAN_DIRECTION_SENSOR_DEV_ATTR(2);  
+DECLARE_FAN_DIRECTION_SENSOR_DEV_ATTR(3);   
+/* 3 fan speed(rpm) attributes in this platform */
+DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(1);
+DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(2);
+DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(3);
+/* 3 fan present attributes in this platform */
+DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(1);
+DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(2);
+DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(3);
+/* 1 fan duty cycle attribute in this platform */
+DECLARE_FAN_DUTY_CYCLE_SENSOR_DEV_ATTR(1);
+/* 3 fan enable attributes in this platform */
+DECLARE_FAN_ENABLE_SENSOR_DEV_ATTR(1);
+DECLARE_FAN_ENABLE_SENSOR_DEV_ATTR(2);
+DECLARE_FAN_ENABLE_SENSOR_DEV_ATTR(3);
+/* 3 fan brightness attributes in this platform */
+DECLARE_FAN_LED_BLINK_SENSOR_DEV_ATTR(1);
+DECLARE_FAN_LED_BLINK_SENSOR_DEV_ATTR(2);
+DECLARE_FAN_LED_BLINK_SENSOR_DEV_ATTR(3);
+
+static struct attribute *t700_fan12_attributes[] = {
+    &sensor_dev_attr_cpld_version.dev_attr.attr,
+    &sensor_dev_attr_raw_access.dev_attr.attr,
+    &sensor_dev_attr_fan_watchdog.dev_attr.attr,
+    DECLARE_FAN_ENABLE_ATTR(1),
+    DECLARE_FAN_ENABLE_ATTR(2),
+    DECLARE_FAN_ENABLE_ATTR(3),
+    DECLARE_FAN_DUTY_CYCLE_ATTR(1),
+    /* fan related attributes */
+    DECLARE_FAN_FAULT_ATTR(1),
+    DECLARE_FAN_FAULT_ATTR(2),
+    DECLARE_FAN_FAULT_ATTR(3),
+    DECLARE_FAN_DIRECTION_ATTR(1),
+    DECLARE_FAN_DIRECTION_ATTR(2),
+    DECLARE_FAN_DIRECTION_ATTR(3),
+    DECLARE_FAN_SPEED_RPM_ATTR(1),
+    DECLARE_FAN_SPEED_RPM_ATTR(2),
+    DECLARE_FAN_SPEED_RPM_ATTR(3),
+    DECLARE_FAN_PRESENT_ATTR(1),
+    DECLARE_FAN_PRESENT_ATTR(2),
+    DECLARE_FAN_PRESENT_ATTR(3),
+    DECLARE_FAN_LED_BLINK_ATTR(1),
+    DECLARE_FAN_LED_BLINK_ATTR(2),
+    DECLARE_FAN_LED_BLINK_ATTR(3),
+    &sensor_dev_attr_fan_cont.dev_attr.attr,
+    NULL
+};
+
+static const struct attribute_group t700_fan12_group = {
+    .attrs = t700_fan12_attributes,
+};
+
+
+#define FAN_DUTY_CYCLE_REG_MASK         0x0F
+#define FAN_MAX_DUTY_CYCLE              255
+#define FAN_REG_VAL_TO_SPEED_RPM_STEP       100
+#define FAN_MAX_WATCHDOG_SECONDS        255
+#define I2C_RW_RETRY_COUNT          10
+#define I2C_RW_RETRY_INTERVAL           60 /* ms */
+
+#define FAN_REG_LED             16
+#define FAN_REG_LED_BLINK       17
+#define FAN_REG_CONT            18
+
+#define FAN_REG_CONT_MASK       0x1
+
+static int t700_fan_read_value(struct i2c_client *client, u8 reg)
+{
+    int status = 0, retry = I2C_RW_RETRY_COUNT;
+
+    while (retry) {
+        status = i2c_smbus_read_byte_data(client, reg);
+        if (unlikely(status < 0)) {
+            msleep(I2C_RW_RETRY_INTERVAL);
+            retry--;
+            continue;
+        }
+
+        break;
+    }
+
+    return status;
+}
+static int t700_fan_write_value(struct i2c_client *client, u8 reg, u8 value)
+{
+    int status = 0, retry = I2C_RW_RETRY_COUNT;
+
+    while (retry) {
+        status = i2c_smbus_write_byte_data(client, reg, value);
+        if (unlikely(status < 0)) {
+            msleep(I2C_RW_RETRY_INTERVAL);
+            retry--;
+            continue;
+        }
+
+        break;
+    }
+
+    return status;
+}
+
+/* fan utility functions */
+static u32 reg_val_to_duty_cycle(u8 reg_val) 
+{
+    if (reg_val < 0x1){
+        return 0;
+     }
+
+    reg_val &= FAN_DUTY_CYCLE_REG_MASK;
+    return ((reg_val << 4) + 15);
+}
+static u8 duty_cycle_to_reg_val(u8 duty_cycle) 
+{
+    return (duty_cycle >> 4);
+}
+static u32 reg_val_to_speed_rpm(u8 reg_val)
+{
+    return (u32)reg_val * FAN_REG_VAL_TO_SPEED_RPM_STEP;
+}
+static u8 reg_val_to_direction(u8 reg_val, enum fan_id id)
+{
+    u8 mask = (1 << id);
+
+    reg_val &= mask;
+
+    return reg_val ? 1 : 0;
+}
+static u8 reg_val_to_is_present(u8 reg_val, enum fan_id id)
+{
+    u8 mask = (1 << id);
+
+    reg_val &= mask;
+
+    return reg_val ? 0 : 1;
+}
+static u8 reg_val_to_is_enable(u8 reg_val, enum fan_id id)
+{
+    u8 mask = (1 << id);
+
+    reg_val &= mask;
+
+    return reg_val ? 1 : 0;
+}
+static u8 is_fan_failed(struct t700_fan_data *data, enum fan_id id)
+{
+    u8 ret = 1;
+    int front_fan_index = FAN_1_I_INPUT_ATTR_ID(1) + id;
+    int rear_fan_index  = FAN_1_O_INPUT_ATTR_ID(1)  + id;
+
+    /* Check if the speed of front or rear fan is ZERO,  
+     */
+    if (reg_val_to_speed_rpm(data->reg_val[front_fan_index]) &&
+        reg_val_to_speed_rpm(data->reg_val[rear_fan_index]))  {
+        ret = 0;
+    }
+    return ret;
+}
+static int fan_set_duty_cycle_to_cpld(struct i2c_client *client, int new_duty_cycle)
+{
+    struct t700_fan_data *data = i2c_get_clientdata(client);
+    u8 reg = fan_reg[0x3];
+    int ret;
+    
+    if (new_duty_cycle < 1 || new_duty_cycle > 16) {
+        new_duty_cycle = 16;   /* New CPLD value range: 1 ~ 16*/
+    }
+
+    /* Update duty cycle
+     */
+    mutex_lock(&data->update_lock);
+    data->reg_val[FAN_PWM1] = new_duty_cycle;
+    ret = t700_fan_write_value(client, reg, new_duty_cycle);
+    mutex_unlock(&data->update_lock);
+    
+    return ret;
+}
+static ssize_t set_duty_cycle(struct device *dev, struct device_attribute *da,
+            const char *buf, size_t count) 
+{
+    int error, value;
+    struct i2c_client *client = to_i2c_client(dev);
+    
+    error = kstrtoint(buf, 10, &value);
+    if (error) {
+        return error;
+    }
+
+    if (value < 0 || value > FAN_MAX_DUTY_CYCLE) {
+        return -EINVAL;
+    }
+
+    fan_set_duty_cycle_to_cpld(client, duty_cycle_to_reg_val(value));
+    
+    return count;
+}
+
+static ssize_t set_fan_bit(struct device *dev, struct device_attribute *da,
+            const char *buf, size_t count)
+{
+    int error, value, index;
+    u8 reg = 0, mask = 0;
+    int status, regval;
+    struct i2c_client *client = to_i2c_client(dev);
+    struct t700_fan_data *data = i2c_get_clientdata(client);
+    struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+
+    error = kstrtoint(buf, 10, &value);
+    if (error) {
+        return error;
+    }
+
+    if (value < 0 || value > 1) {
+        return -EINVAL;
+    }
+
+    switch (attr->index) {
+    case FAN_WATCHDOG:
+        reg  = fan_reg[FAN_WATCHDOG];
+        mask = 0x1;
+	index = FAN_WATCHDOG;
+        break;
+    case FAN_ENABLE_ATTR_ID(1)...FAN_ENABLE_ATTR_ID(5):
+        reg  = fan_reg[FAN_ENABLE_REG];
+        mask = 0x1 << (attr->index - FAN1_ENABLE);
+	index = FAN_ENABLE_REG;
+        break;
+    case FAN_CONT:
+        reg  = fan_reg[FAN_REG_CONT];
+        mask = FAN_REG_CONT_MASK;
+	index = FAN_REG_CONT;
+        break;
+    default:
+        return 0;
+    }
+
+    mutex_lock(&data->update_lock);
+    status = t700_fan_read_value(client, reg);
+    if (status < 0) {
+        dev_dbg(&client->dev, "reg %d, err %d\n", reg, status);
+        goto exit;
+    }
+
+    regval = value ? (status | mask) : (status & ~mask);
+    data->reg_val[index] = regval;
+    status = t700_fan_write_value(client, reg, regval);
+    if (status < 0) {
+        dev_dbg(&client->dev, "reg %d, err %d\n", reg, status);
+        goto exit;
+    }
+
+    mutex_unlock(&data->update_lock);
+    return count;
+
+exit:
+    mutex_unlock(&data->update_lock);
+    return status;
+}
+
+static ssize_t t700_fan_blink(struct device *dev, struct device_attribute *da, const char *buf, size_t count) 
+{
+    int error, value, status, ret;
+    u8 reg = 0, mask = 0;
+    struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+    struct i2c_client *client = to_i2c_client(dev);
+    struct t700_fan_data *data = i2c_get_clientdata(client);
+
+    error = kstrtoint(buf, 10, &value);
+    if (error) {
+        return error;
+    }
+
+    if (value < 0 || value > 1) {
+        return -EINVAL;
+    }
+
+    mask = 1 << (attr->index - FAN_LED_BLINK_ATTR_ID(1) + 3);
+    if (1 == value) {
+        mutex_lock(&data->update_lock);
+        reg = fan_reg[FAN_REG_LED];
+        status = t700_fan_read_value(client, reg);
+        status |= mask;
+        ret = t700_fan_write_value(client, reg, status);
+
+        reg = fan_reg[FAN_REG_LED_BLINK];
+        status = t700_fan_read_value(client, reg);
+        status |= mask;
+        ret = t700_fan_write_value(client, reg, status);
+        mutex_unlock(&data->update_lock);
+    }
+    else {
+        mutex_lock(&data->update_lock);
+        reg = fan_reg[FAN_REG_LED];
+        status = t700_fan_read_value(client, reg);
+        status &= ~mask;
+        ret = t700_fan_write_value(client, reg, status);
+
+        reg = fan_reg[FAN_REG_LED_BLINK];
+        status = t700_fan_read_value(client, reg);
+        status &= ~mask;
+        ret = t700_fan_write_value(client, reg, status);
+        mutex_unlock(&data->update_lock);
+    }
+
+    return count;
+}
+
+static ssize_t raw_access(struct device *dev, struct device_attribute *da,
+            const char *buf, size_t count)
+{
+    u32 addr, val;
+    
+        int status;
+        struct i2c_client *client = to_i2c_client(dev);
+        struct t700_fan_data *data = i2c_get_clientdata(client);
+
+    if (sscanf(buf, "0x%x 0x%x", &addr, &val) != 2) {
+        return -EINVAL;
+    }
+
+    if (addr > 0xFF || val > 0xFF) {
+        return -EINVAL;
+    }
+
+    mutex_lock(&data->update_lock);
+    status = t700_fan_write_value(client, addr, val);
+    if (unlikely(status < 0)) {
+        goto exit;
+    }
+    mutex_unlock(&data->update_lock);
+    return count;
+exit:
+    mutex_unlock(&data->update_lock);
+    return status;  
+
+
+}
+
+static ssize_t fan_show_value(struct device *dev, struct device_attribute *da,
+             char *buf)
+{
+    struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+    struct t700_fan_data *data = t700_fan_update_device(dev);
+    ssize_t ret = 0;
+    u8 reg_val;
+    u32 duty_cycle;
+    
+    if (data->valid) {
+        switch (attr->index) {
+            case FAN_PWM1:
+                duty_cycle = reg_val_to_duty_cycle(data->reg_val[FAN_PWM1]);
+                ret = sprintf(buf, "%u\n", duty_cycle);
+                break;
+            case FAN_2_I_INPUT_ATTR_ID(3)...FAN_1_O_INPUT_ATTR_ID(1):
+	    	reg_val = data->reg_val[attr->index];
+                ret = sprintf(buf, "%u\n", reg_val_to_speed_rpm(reg_val));
+                break;
+            case FAN_DIRECTION_ATTR_ID(1)...FAN_DIRECTION_ATTR_ID(5):
+                ret = sprintf(buf, "%d\n", 
+                              reg_val_to_direction(data->reg_val[FAN_DIRECTION_REG],
+                              FAN_DIRECTION_ATTR_ID(5) - attr->index));
+                                                      
+                break;
+            case FAN_PRESENT_ATTR_ID(1)...FAN_PRESENT_ATTR_ID(5):
+                ret = sprintf(buf, "%d\n",
+                              reg_val_to_is_present(data->reg_val[FAN_PRESENT_REG],
+                              attr->index - FAN_PRESENT_ATTR_ID(1)));
+                break;
+            case FAN_FAULT_ATTR_ID(1)...FAN_FAULT_ATTR_ID(5):
+                ret = sprintf(buf, "%d\n", is_fan_failed(data, FAN_FAULT_ATTR_ID(5) - attr->index));
+                break;
+            case CPLD_VERSION:
+                ret = sprintf(buf, "%d\n", data->reg_val[CPLD_VERSION]);
+                break;
+
+            case FAN_ENABLE_ATTR_ID(1)...FAN_ENABLE_ATTR_ID(5):
+                ret = sprintf(buf, "%d\n",
+                              reg_val_to_is_enable(data->reg_val[FAN_ENABLE_REG],
+                              FAN_ENABLE_ATTR_ID(5) - attr->index));
+                break;
+
+            case FAN_WATCHDOG:
+                ret = sprintf(buf, "%d\n",
+                              reg_val_to_is_enable(data->reg_val[FAN_WATCHDOG], 0) );
+                break;
+            case FAN_CONT:
+                ret = sprintf(buf, "%d\n", data->reg_val[FAN_REG_CONT] & FAN_REG_CONT_MASK);
+                break;
+            default:
+                break;
+        }       
+    }
+    
+    return ret;
+}
+
+static struct t700_fan_data *t700_fan_update_device(struct device *dev)
+{
+    struct i2c_client *client = to_i2c_client(dev);
+    struct t700_fan_data *data = i2c_get_clientdata(client);
+
+    mutex_lock(&data->update_lock);
+
+    if (time_after(jiffies, data->last_updated + HZ + HZ / 2) || 
+        !data->valid) {
+        int i;
+
+        dev_dbg(&client->dev, "Starting t700_fan update\n");
+        data->valid = 0;
+        
+        /* Update fan data
+         */
+        for (i = 0; i < ARRAY_SIZE(data->reg_val); i++) {
+            int status = t700_fan_read_value(client, fan_reg[i]);
+            
+            if (status < 0) {
+                printk(KERN_INFO "reg %d, err %d\r\n", fan_reg[i], status);
+                dev_dbg(&client->dev, "reg %d, err %d\n", fan_reg[i], status);
+                goto exit;
+            }
+            else {
+                data->reg_val[i] = status;
+            }
+        }
+        data->last_updated = jiffies;
+        data->valid = 1;
+    }
+
+exit:   
+    mutex_unlock(&data->update_lock);
+
+    return data;
+}
+
+static int t700_fan_probe(struct i2c_client *client,
+            const struct i2c_device_id *dev_id)
+{
+    struct t700_fan_data *data;
+    int status;
+
+    if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE_DATA)) {
+        status = -EIO;
+        goto exit;
+    }
+    data = kzalloc(sizeof(struct t700_fan_data), GFP_KERNEL);
+    if (!data) {
+        status = -ENOMEM;
+        goto exit;
+    }
+    i2c_set_clientdata(client, data);
+    data->valid = 0;
+    mutex_init(&data->update_lock);
+
+    switch (dev_id->driver_data) {
+    case t700_fan12:
+        data->groups= &t700_fan12_group;
+        break;
+    default:
+        status = -EIO;
+        goto exit;
+        break;
+    }
+
+    dev_info(&client->dev, "chip found\n");
+
+    /* Register sysfs hooks */
+    status = sysfs_create_group(&client->dev.kobj, data->groups);
+    if (status) {
+        goto exit_free;
+    }
+    data->hwmon_dev = hwmon_device_register(&client->dev);
+    if (IS_ERR(data->hwmon_dev)) {
+        status = PTR_ERR(data->hwmon_dev);
+        goto exit_remove;
+    }
+
+    dev_info(&client->dev, "%s: fan '%s'\n",
+         dev_name(data->hwmon_dev), client->name);
+
+    return 0;
+
+exit_remove:
+    sysfs_remove_group(&client->dev.kobj, data->groups);
+exit_free:
+    kfree(data);
+exit:
+    
+    return status;
+}
+static int t700_fan_remove(struct i2c_client *client)
+{
+    struct t700_fan_data *data = i2c_get_clientdata(client);
+
+    hwmon_device_unregister(data->hwmon_dev);
+    sysfs_remove_group(&client->dev.kobj, data->groups);
+    kfree(data);
+    
+    return 0;
+}
+/* Addresses to scan */
+static const unsigned short normal_i2c[] = { I2C_CLIENT_END };
+static const struct i2c_device_id t700_fan_id[] = {
+    { "fan10", t700_fan10 },
+    { "fan12", t700_fan12 },
+    { /* LIST END */ }
+};
+MODULE_DEVICE_TABLE(i2c, t700_fan_id);
+static struct i2c_driver t700_fan_driver = {
+    .class      = I2C_CLASS_HWMON,
+    .driver = {
+        .name    = DRVNAME,
+    },
+    .probe      = t700_fan_probe,
+    .remove    = t700_fan_remove,
+    .id_table    = t700_fan_id,
+    .address_list = normal_i2c,
+};
+module_i2c_driver(t700_fan_driver);
+MODULE_AUTHOR("Roy Chuang <roy_chuang@edge-core.com>");
+MODULE_DESCRIPTION("t700_fan driver");
+MODULE_LICENSE("GPL");
+
-- 
1.9.1

