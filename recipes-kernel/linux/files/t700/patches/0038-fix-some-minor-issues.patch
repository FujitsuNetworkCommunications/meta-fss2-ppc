From aa839fd5da9ef053d88ded425c338eb007781a46 Mon Sep 17 00:00:00 2001
From: linpower <linpower@edge-core.com>
Date: Fri, 15 Feb 2019 16:01:15 +0800
Subject: [PATCH 1/1] fix some minor issues 1.A issue with tail pointer
 adjustment 2.bug in Broadcom tagging in nonlinear packets, compare wrong
 source 3.lack of size checking, print error message if memory allocate
 failure, and optimal size

---
 drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c | 41 +++++++++++++++---------
 1 file changed, 25 insertions(+), 16 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
index 2d43257..18f0beb 100755
--- a/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/dpa/dpaa_eth_sg.c
@@ -248,7 +248,7 @@ int dpa_append_bcm_tag_buffer(unsigned char* src, unsigned char* dst, int length
         /* Add broadcom management tag*/
         brcmTag.type = htons(BRCM_TYPE);
         /*COPY brcm option and ports*/
-        if(memcmp(dst,multicast_bpdu_mac,5)==0){
+        if(memcmp(src,multicast_bpdu_mac,5)==0){
             brcmTag.op = htons(BRCM_BPDU_OP);
             brcmTag.port=htons(BRCM_BPDU_PORT);
         }else{
@@ -287,12 +287,16 @@ void dpa_append_bcm_tag_nonlinear(struct sk_buff *skb, struct net_device *net_de
         /*BPDU header*/
     int ret;
 
-    new_data= kmalloc(CONFIG_FSL_FM_MAX_FRAME_SIZE,GFP_KERNEL);
-    if(new_data==NULL)         return;
-
-    data= kmalloc(CONFIG_FSL_FM_MAX_FRAME_SIZE,GFP_KERNEL);
+    new_data= kmalloc(length+needed,GFP_KERNEL);
+    if(new_data==NULL)
+    {
+        printk("(%s:%d) Can't allocate meorny!\n\r",__FUNCTION__,__LINE__);
+        return;
+    }
+    data= kmalloc(length+needed,GFP_KERNEL);
     if(data==0)         
     {
+        printk("(%s:%d) Can't allocate meorny!\n\r",__FUNCTION__,__LINE__);
         kfree(new_data);
         return;
     }
@@ -318,7 +322,7 @@ void dpa_append_bcm_tag_nonlinear(struct sk_buff *skb, struct net_device *net_de
         return;
     }
     skb->len += needed;
-    
+    skb->tail +=needed;
     dpa_append_buffer_to_skb(skb,data,len_new);    
 
 /*
@@ -358,9 +362,19 @@ void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
         if(skb_is_nonlinear(skb)){
            return;
         }
-        new_data = kmalloc(CONFIG_FSL_FM_MAX_FRAME_SIZE,GFP_KERNEL);
-        if(new_data==NULL)         return;
-
+    /*if packet length is small than 60, add pad to 60*/
+        if(length<60) {
+            memset(skb->data+length,0,(60-length));
+            skb_put(skb,60-length);
+            length=60;            
+        }
+        
+        new_data = kmalloc(length+needed,GFP_KERNEL);
+        if(new_data==NULL)
+        {
+            printk("(%s:%d) Can't allocate meorny!\n\r",__FUNCTION__,__LINE__);
+            return;
+        }
         
         memcpy(new_data,skb->data,12);
 	/*COPY brcm_tag*/
@@ -374,12 +388,7 @@ void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
             brcmTag.op = htons(BRCM_OP);
             brcmTag.port=htons(BRCM_PORT);
         }
-    /*if packet length is small than 60, add pad to 60*/
-        if(length<60) {
-            memset(skb->data+length,0,(60-length));
-            skb_put(skb,60-length);
-            length=60;            
-        }
+
         //printk("(%s:%d),skb headroom:%d, tailroom:%d,availroom:%d,skb->data_len:%d,skb->len:%d,skb_end_offset:%d\n\r",__FUNCTION__,__LINE__,skb_headroom(skb), skb_tailroom(skb), skb_availroom(skb),skb->data_len,skb->len,skb_end_offset(skb));
         memcpy(new_data + 12,&brcmTag,sizeof(struct brcm_tag));
 
@@ -1290,7 +1299,7 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
               new_skb = skb_copy_expand(skb,0,10,GFP_ATOMIC);
 		if (new_skb != NULL) {
                     kfree_skb(skb);
-			skb = new_skb;           
+                    skb = new_skb;           
 		} 
              
 	       if(skb->ip_summed==3) {skb_checksum_help(skb);skb->ip_summed=2;}
-- 
1.9.1

