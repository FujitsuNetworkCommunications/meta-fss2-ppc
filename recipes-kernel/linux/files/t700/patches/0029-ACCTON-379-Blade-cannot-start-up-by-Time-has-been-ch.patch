From 6d39eabcc09b690a75a82e0f99324492e61c624b Mon Sep 17 00:00:00 2001
From: aken_liu <aken_liu@accton.com.tw>
Date: Fri, 28 Dec 2018 18:51:22 +0800
Subject: [PATCH] ACCTON-379: Blade cannot start up by "Time has been changed"
 continuously output on console if RTC time is abnormal (out of rang
 1970/01/02 - 2033/12/31), then reset to default time 1970/01/02.

---
 drivers/rtc/Kconfig      |  6 ++++++
 drivers/rtc/rtc-ds1307.c | 34 ++++++++++++++++++++++++++++++++++
 2 files changed, 40 insertions(+)

diff --git a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
index 9654aa3..1c690f1 100644
--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -56,6 +56,12 @@ config RTC_HCTOSYS_DEVICE
 	  sleep states. Do not specify an RTC here unless it stays powered
 	  during all this system's supported sleep states.
 
+config RTC_OVERFLOW_TO_DEFAULT
+        bool "RTC reset to default 1970-01-02 0:0:0"
+        help
+          Say yes here to enable the reset date to 1970-01-02 when the date
+          is overflow in the 32bit system.
+
 config RTC_DEBUG
 	bool "RTC debug support"
 	help
diff --git a/drivers/rtc/rtc-ds1307.c b/drivers/rtc/rtc-ds1307.c
index ca18fd1..8b576f4 100644
--- a/drivers/rtc/rtc-ds1307.c
+++ b/drivers/rtc/rtc-ds1307.c
@@ -360,6 +360,22 @@ static irqreturn_t ds1307_irq(int irq, void *dev_id)
 }
 
 /*----------------------------------------------------------------------*/
+#ifdef CONFIG_RTC_OVERFLOW_TO_DEFAULT
+static int ds1307_set_time(struct device *dev, struct rtc_time *t);
+
+static void rtc_reset_to_default(struct rtc_time *tm)
+{
+    tm->tm_year = 70;
+    tm->tm_mon = 0;
+    tm->tm_mday = 2;
+    tm->tm_wday = 0;
+    tm->tm_hour = 0;
+    tm->tm_min = 0;
+    tm->tm_sec = 0;
+
+    return;
+}
+#endif
 
 static int ds1307_get_time(struct device *dev, struct rtc_time *t)
 {
@@ -385,8 +401,22 @@ static int ds1307_get_time(struct device *dev, struct rtc_time *t)
 	tmp = ds1307->regs[DS1307_REG_MONTH] & 0x1f;
 	t->tm_mon = bcd2bin(tmp) - 1;
 
+#ifdef CONFIG_RTC_OVERFLOW_TO_DEFAULT
+	t->tm_year = bcd2bin(ds1307->regs[DS1307_REG_YEAR]) + 70;
+
+	/*support from 1970/1/2 0:0:0 - 2033/12/31 23:59:59, otherwise, set default to 1970/1/2 0:0:0.
+	 */
+	if ((t->tm_year < 70) || (t->tm_year == 70 && t->tm_mon == 0 && t->tm_mday == 1)
+		|| (t->tm_year >= 134))  /* year < 1970 or year > 2033/12/31 */
+	{
+		rtc_reset_to_default(t);
+
+		ds1307_set_time(dev,t);
+	}
+#else
 	/* assume 20YY not 19YY, and ignore DS1337_BIT_CENTURY */
 	t->tm_year = bcd2bin(ds1307->regs[DS1307_REG_YEAR]) + 100;
+#endif
 
 	dev_dbg(dev, "%s secs=%d, mins=%d, "
 		"hours=%d, mday=%d, mon=%d, year=%d, wday=%d\n",
@@ -418,8 +448,12 @@ static int ds1307_set_time(struct device *dev, struct rtc_time *t)
 	buf[DS1307_REG_MDAY] = bin2bcd(t->tm_mday);
 	buf[DS1307_REG_MONTH] = bin2bcd(t->tm_mon + 1);
 
+#ifdef CONFIG_RTC_OVERFLOW_TO_DEFAULT
+	tmp = t->tm_year - 70;
+#else
 	/* assume 20YY not 19YY */
 	tmp = t->tm_year - 100;
+#endif
 	buf[DS1307_REG_YEAR] = bin2bcd(tmp);
 
 	switch (ds1307->type) {
-- 
1.9.1

