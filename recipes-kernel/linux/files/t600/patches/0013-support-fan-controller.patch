From 834296c28955e22670eb379e7401462e6c6aed54 Mon Sep 17 00:00:00 2001
From: aken_liu <aken_liu@accton.com.tw>
Date: Tue, 18 Sep 2018 19:36:13 +0800
Subject: [PATCH] support fan controller 1. add thermal's sysfs nodes on the
 MDEC 2. implement the fan controller algorithm

---
 drivers/hwmon/accton_t600_fan.c    | 389 ++++++++++++++++++++++++++++++++++++-
 drivers/misc/accton_t600_fj_mdec.c |  70 +++++--
 2 files changed, 432 insertions(+), 27 deletions(-)

diff --git a/drivers/hwmon/accton_t600_fan.c b/drivers/hwmon/accton_t600_fan.c
index f116a60..05fdb5a 100644
--- a/drivers/hwmon/accton_t600_fan.c
+++ b/drivers/hwmon/accton_t600_fan.c
@@ -31,6 +31,131 @@
 #include <linux/delay.h>  //msleep
 
 #define DRVNAME "t600_fan"
+#define ENABLE_FAN_CTRL_ROUTINE	1
+
+/* Fan speed control related data
+ */
+enum fan_duty_cycle {
+	FAN_DUTY_CYCLE_50_CPLD_VAL  = 0x7,
+	FAN_DUTY_CYCLE_63_CPLD_VAL  = 0x9,
+	FAN_DUTY_CYCLE_75_CPLD_VAL  = 0xB,
+	FAN_DUTY_CYCLE_87_CPLD_VAL  = 0xD,
+	FAN_DUTY_CYCLE_MAX_CPLD_VAL = 0xF,
+	FAN_DUTY_CYCLE_DEFAULT  = FAN_DUTY_CYCLE_50_CPLD_VAL
+};
+
+#if (ENABLE_FAN_CTRL_ROUTINE == 1)
+#include <linux/fs.h>
+#include <linux/uaccess.h>
+#include <linux/syscalls.h>
+#include <linux/kthread.h>
+
+#define FAN_SPEED_CTRL_INTERVAL	3000
+#define THERMAL_SENSOR_DATA_LEN 6
+
+enum thermal_id
+{
+    THERMAL_LM75_11_48,
+    THERMAL_LM75_11_49,
+    THERMAL_LM75_11_4a,
+    THERMAL_LM75_11_4b,
+    THERMAL_LM75_11_4c,
+    THERMAL_LM75_20_49,
+    THERMAL_LM75_21_49,
+    THERMAL_LM75_31_48,
+    NUM_OF_THERMAL_SENSOR
+};
+
+#if 1 /* Roy Chuang Mark Begin 2018/9/5, reason: */
+char *thermal_sensor_path[NUM_OF_THERMAL_SENSOR] = {
+"/sys/bus/i2c/devices/20-0049/temp1_input",
+"/sys/bus/i2c/devices/21-0049/temp1_input",
+"/sys/bus/i2c/devices/31-0048/temp1_input",
+"/sys/bus/pci/devices/0000:03:00.0/temp1_input",
+"/sys/bus/pci/devices/0000:03:00.0/temp2_input",
+"/sys/bus/pci/devices/0000:04:00.0/temp1_input",
+"/sys/bus/pci/devices/0000:04:00.0/temp2_input",
+"/sys/bus/i2c/devices/6-001a/temp1_input"
+};
+#else /* simulation */
+char *thermal_sensor_path[NUM_OF_THERMAL_SENSOR] = {
+"/sys/bus/i2c/devices/10-0061/temp0_input",
+"/sys/bus/i2c/devices/10-0061/temp1_input",
+"/sys/bus/i2c/devices/10-0061/temp2_input",
+"/sys/bus/i2c/devices/10-0061/temp3_input",
+"/sys/bus/i2c/devices/10-0061/temp4_input",
+"/sys/bus/i2c/devices/10-0061/temp5_input",
+"/sys/bus/i2c/devices/10-0061/temp6_input",
+"/sys/bus/i2c/devices/10-0061/temp7_input",
+};
+#endif /* Roy Chuang Mark End */
+
+typedef struct fan_ctrl_policy {
+   int cpld_val;
+   int temp_down_adjust; /* The boundary temperature to down adjust fan speed */
+   int temp_up_adjust;   /* The boundary temperature to up adjust fan speed */
+} fan_ctrl_policy_t;
+
+fan_ctrl_policy_t  policy_lm75_20_49[] = {
+{FAN_DUTY_CYCLE_50_CPLD_VAL,	  0,   26000},
+{FAN_DUTY_CYCLE_75_CPLD_VAL,  18000,  36000},
+{FAN_DUTY_CYCLE_MAX_CPLD_VAL, 29000,	  0}
+};
+
+fan_ctrl_policy_t  policy_lm75_21_49[] = {
+{FAN_DUTY_CYCLE_50_CPLD_VAL,	  0,   26000},
+{FAN_DUTY_CYCLE_75_CPLD_VAL,  18000,  36000},
+{FAN_DUTY_CYCLE_MAX_CPLD_VAL, 29000,	  0}
+};
+
+fan_ctrl_policy_t  policy_lm75_31_48[] = {
+{FAN_DUTY_CYCLE_50_CPLD_VAL,	  0,   26000},
+{FAN_DUTY_CYCLE_75_CPLD_VAL,  18000,  36000},
+{FAN_DUTY_CYCLE_MAX_CPLD_VAL, 29000,	  0}
+};
+
+fan_ctrl_policy_t  policy_piu_03_01[] = {
+{FAN_DUTY_CYCLE_50_CPLD_VAL,	  0,   100000},
+{FAN_DUTY_CYCLE_75_CPLD_VAL,  84000,  100000},
+{FAN_DUTY_CYCLE_MAX_CPLD_VAL, 88000,	  0}
+};
+
+fan_ctrl_policy_t  policy_piu_03_02[] = {
+{FAN_DUTY_CYCLE_50_CPLD_VAL,	  0,   100000},
+{FAN_DUTY_CYCLE_75_CPLD_VAL,  84000,  100000},
+{FAN_DUTY_CYCLE_MAX_CPLD_VAL, 88000,	  0}
+};
+
+fan_ctrl_policy_t  policy_piu_04_01[] = {
+{FAN_DUTY_CYCLE_50_CPLD_VAL,	  0,   100000},
+{FAN_DUTY_CYCLE_75_CPLD_VAL,  83000,  100000},
+{FAN_DUTY_CYCLE_MAX_CPLD_VAL, 87000,	  0}
+};
+
+fan_ctrl_policy_t  policy_piu_04_02[] = {
+{FAN_DUTY_CYCLE_50_CPLD_VAL,	  0,   100000},
+{FAN_DUTY_CYCLE_75_CPLD_VAL,  83000,  100000},
+{FAN_DUTY_CYCLE_MAX_CPLD_VAL, 87000,	  0}
+};
+
+fan_ctrl_policy_t  policy_jc42_6_1a[] = {
+{FAN_DUTY_CYCLE_50_CPLD_VAL,	  0,   80000},
+{FAN_DUTY_CYCLE_75_CPLD_VAL,  72000,  80000},
+{FAN_DUTY_CYCLE_MAX_CPLD_VAL, 73000,	  0}
+};
+
+fan_ctrl_policy_t *policies[] = {
+policy_lm75_20_49,
+policy_lm75_21_49,
+policy_lm75_31_48,
+policy_piu_03_01,
+policy_piu_03_02,
+policy_piu_04_01,
+policy_piu_04_02,
+policy_jc42_6_1a
+};
+#endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
+
 
 static struct t600_fan_data *t600_fan_update_device(struct device *dev);                    
 static ssize_t fan_show_value(struct device *dev, struct device_attribute *da, char *buf);
@@ -70,6 +195,14 @@ struct t600_fan_data {
     char        valid;         /* != 0 if registers are valid */
     unsigned long   last_updated;   /* In jiffies */
     u8      reg_val[ARRAY_SIZE(fan_reg)]; /* Register value */
+
+#if (ENABLE_FAN_CTRL_ROUTINE == 1)
+    struct task_struct *fanctrl_tsk;
+    struct completion	fanctrl_update_stop;
+    struct completion   fanctrl_suspend;
+    u8  fanctrl_disabled;
+    int temp_input[NUM_OF_THERMAL_SENSOR];  /* The temperature read from thermal sensor(lm75) */
+#endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
 };
 
 #define FAN_PRESENT_ATTR_ID(index)      FAN##index##_PRESENT
@@ -124,10 +257,21 @@ enum sysfs_fan_attributes {
     FAN_DIRECTION_ATTR_ID(2),
     FAN_DIRECTION_ATTR_ID(3),
     FAN_DIRECTION_ATTR_ID(4),
-    FAN_DIRECTION_ATTR_ID(5)
+    FAN_DIRECTION_ATTR_ID(5),
+#if (ENABLE_FAN_CTRL_ROUTINE == 1)
+    FAN_DISABLE_FANCTRL,
+#endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
 };
 
 /* Define attributes */
+#if (ENABLE_FAN_CTRL_ROUTINE == 1)
+static ssize_t show_fan_ctrl_routine(struct device *dev, struct device_attribute *da, char *buf);
+static ssize_t disable_fan_ctrl_routine(struct device *dev, struct device_attribute *da, const char *buf, size_t count);
+
+static SENSOR_DEVICE_ATTR(fan_disable_fanctrl, S_IWUSR | S_IRUGO, show_fan_ctrl_routine,
+										   disable_fan_ctrl_routine, FAN_DISABLE_FANCTRL);
+#endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
+
 #define DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(index) \
     static SENSOR_DEVICE_ATTR(fan##index##_fault, S_IRUGO, fan_show_value, NULL, FAN##index##_FAULT)
 #define DECLARE_FAN_FAULT_ATTR(index)     &sensor_dev_attr_fan##index##_fault.dev_attr.attr
@@ -196,7 +340,7 @@ DECLARE_FAN_ENABLE_SENSOR_DEV_ATTR(5);
 static struct attribute *t600_fan_attributes[] = {
     &sensor_dev_attr_cpld_version.dev_attr.attr,
     &sensor_dev_attr_raw_access.dev_attr.attr,
-    &sensor_dev_attr_fan_watchdog.dev_attr.attr,  
+    &sensor_dev_attr_fan_watchdog.dev_attr.attr,
     DECLARE_FAN_ENABLE_ATTR(1),
     DECLARE_FAN_ENABLE_ATTR(2),
     DECLARE_FAN_ENABLE_ATTR(3),
@@ -223,12 +367,15 @@ static struct attribute *t600_fan_attributes[] = {
     DECLARE_FAN_PRESENT_ATTR(2),
     DECLARE_FAN_PRESENT_ATTR(3),
     DECLARE_FAN_PRESENT_ATTR(4),
-    DECLARE_FAN_PRESENT_ATTR(5),    
+    DECLARE_FAN_PRESENT_ATTR(5),
+#if (ENABLE_FAN_CTRL_ROUTINE == 1)
+    &sensor_dev_attr_fan_disable_fanctrl.dev_attr.attr,
+#endif
     NULL
 };
 
 #define FAN_DUTY_CYCLE_REG_MASK         0x0F
-#define FAN_MAX_DUTY_CYCLE              100
+#define FAN_MAX_DUTY_CYCLE              255
 #define FAN_REG_VAL_TO_SPEED_RPM_STEP       100
 #define FAN_MAX_WATCHDOG_SECONDS        255
 #define I2C_RW_RETRY_COUNT          10
@@ -272,13 +419,16 @@ static int t600_fan_write_value(struct i2c_client *client, u8 reg, u8 value)
 /* fan utility functions */
 static u32 reg_val_to_duty_cycle(u8 reg_val) 
 {
+    if (reg_val < 0x1){
+        return 0;
+     }
+
     reg_val &= FAN_DUTY_CYCLE_REG_MASK;
-    return ((u32) reg_val * 625)/100;
+    return ((reg_val << 4) + 15);
 }
 static u8 duty_cycle_to_reg_val(u8 duty_cycle) 
 {
-
-    return ((u32) duty_cycle * 100) / 625;
+    return (duty_cycle >> 4);
 }
 static u32 reg_val_to_speed_rpm(u8 reg_val)
 {
@@ -454,6 +604,7 @@ exit:
 
 
 }
+
 static ssize_t fan_show_value(struct device *dev, struct device_attribute *da,
              char *buf)
 {
@@ -537,6 +688,210 @@ static ssize_t fan_show_value(struct device *dev, struct device_attribute *da,
     return ret;
 }
 
+#if (ENABLE_FAN_CTRL_ROUTINE == 1)
+static u8 is_any_fan_failed(struct t600_fan_data *data)
+{
+	int i = 0;
+
+	for (i = 0; i < NUM_OF_FAN; i++) {
+		if (is_fan_failed(data, i)) {
+			return 1;
+		}
+	}
+
+	return 0;
+}
+
+static ssize_t show_fan_ctrl_routine(struct device *dev, struct device_attribute *da,
+			 char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct t600_fan_data *data = i2c_get_clientdata(client);
+
+	return sprintf(buf, "%d\n", data->fanctrl_disabled);
+}
+
+static ssize_t disable_fan_ctrl_routine(struct device *dev, struct device_attribute *da,
+			const char *buf, size_t count)
+{
+	int error, value;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct t600_fan_data *data = i2c_get_clientdata(client);
+
+	error = kstrtoint(buf, 10, &value);
+	if (error) {
+		return error;
+	}
+
+	data->fanctrl_disabled = value ? 1 : 0;
+
+	if (data->fanctrl_disabled) {
+		wait_for_completion(&data->fanctrl_suspend);
+	}
+	else {
+		init_completion(&data->fanctrl_suspend);
+	}
+
+	return count;
+}
+
+static int read_file_contents(char *path, char *buf, long data_len, struct device *dev)
+{
+	int status, retry = I2C_RW_RETRY_COUNT;
+
+	while (retry) {
+		struct file *fp = filp_open(path, O_RDONLY, 0);
+		status = 0;
+
+		if (IS_ERR(fp)) {
+			status = PTR_ERR(fp);
+			msleep(I2C_RW_RETRY_INTERVAL);
+			retry--;
+			continue;
+		}
+
+		kernel_read(fp, 0, buf, data_len);
+		break;
+	}
+
+    return status;
+}
+
+static struct t600_fan_data *t600_fan_update_temperature(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct t600_fan_data *data = i2c_get_clientdata(client);
+	int i = 0;
+	char temp[NUM_OF_THERMAL_SENSOR][THERMAL_SENSOR_DATA_LEN+1];
+
+	data->valid = 0;
+
+	/* Update temperature
+	 */
+	for (i = 0; i < NUM_OF_THERMAL_SENSOR; i++) {
+		if (read_file_contents(thermal_sensor_path[i], temp[i], sizeof(temp[i]), &client->dev) == 0) {
+			temp[i][sizeof(temp[i])-1] = '\0';
+
+			if (kstrtoint(temp[i], 10, &data->temp_input[i]) != 0) {
+				dev_dbg(&client->dev, "Failed to convert temperature read from (%s)\n", thermal_sensor_path[i]);
+				goto exit;
+			}
+		}
+		else {
+			dev_dbg(&client->dev, "Failed to read temperature from (%s)\n", thermal_sensor_path[i]);
+			goto exit;
+		}
+	}
+
+	data->valid = 1;
+
+exit:
+	return data;
+}
+
+static void set_fan_speed_by_temp(struct i2c_client *client, struct t600_fan_data *data) {
+	int  i, j, policy_items, old_duty_cycle, new_duty_cycle = 0;
+	fan_ctrl_policy_t *policy;
+
+	old_duty_cycle = data->reg_val[FAN_PWM1];
+
+	/* Adjust new duty cycle
+	 */
+	for (i = 0; i < ARRAY_SIZE(policies); i++) {
+		int temperature;
+		policy       = policies[i];
+		policy_items = ARRAY_SIZE(policy_lm75_20_49);
+		temperature  = data->temp_input[i];
+
+		for (j = 0; j < policy_items; j++) {
+			if (policy[j].cpld_val != old_duty_cycle) {
+				continue;
+			}
+
+			break;
+		}
+
+		if (j >= policy_items) {
+			continue;
+		}
+
+		if ((temperature > policy[j].temp_up_adjust) && (policy[j].temp_up_adjust != 0)) {
+			if (policy[j+1].cpld_val > new_duty_cycle) {
+				new_duty_cycle = policy[j+1].cpld_val;
+			}
+		}
+		else if ((temperature <= policy[j].temp_down_adjust) && (policy[j].temp_down_adjust != 0)) {
+			if (policy[j-1].cpld_val > new_duty_cycle) {
+				new_duty_cycle = policy[j-1].cpld_val;
+			}
+		}
+		else {
+			if (old_duty_cycle > new_duty_cycle) {
+				new_duty_cycle = old_duty_cycle;
+			}
+		}
+	}
+
+	/* Check if current duty is found in policy list */
+	if (!new_duty_cycle) {
+		new_duty_cycle = FAN_DUTY_CYCLE_DEFAULT;
+	}
+
+	/* Check if duty cycle is changed */
+	if (new_duty_cycle == old_duty_cycle) {
+		return;
+	}
+
+	/* Update duty cycle
+	 */
+	fan_set_duty_cycle_to_cpld(client, new_duty_cycle);
+}
+
+static int fan_speed_ctrl_routine(void *arg)
+{
+	struct i2c_client *client = (struct i2c_client *)arg;
+	struct t600_fan_data *data = i2c_get_clientdata(client);
+
+	while (!kthread_should_stop())
+	{
+		msleep(FAN_SPEED_CTRL_INTERVAL);
+
+		if (data->fanctrl_disabled) {
+			complete_all(&data->fanctrl_suspend);
+			continue;
+		}
+
+		/* Update fan status
+		 */
+		t600_fan_update_device(&client->dev);
+
+		mutex_lock(&data->update_lock);
+		t600_fan_update_temperature(&client->dev);
+		mutex_unlock(&data->update_lock);
+
+		/* Set fan speed as max if one of the following state occurs:
+		 * 1. Invalid fan data
+		 * 2. Any fan is in failed state
+		 */
+		if (!data->valid || is_any_fan_failed(data)) {
+			fan_set_duty_cycle_to_cpld(client, FAN_DUTY_CYCLE_MAX_CPLD_VAL);
+			continue;
+		}
+
+		/* Set fan speed by current duty cycle and temperature
+		 */
+		set_fan_speed_by_temp(client, data);
+	}
+
+	if (data != NULL) {
+		complete_all(&data->fanctrl_update_stop);
+	}
+
+	return 0;
+}
+#endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
+
+
 static const struct attribute_group t600_fan_group = {
     .attrs = t600_fan_attributes,
 };
@@ -614,6 +969,19 @@ static int t600_fan_probe(struct i2c_client *client,
     dev_info(&client->dev, "%s: fan '%s'\n",
          dev_name(data->hwmon_dev), client->name);
 
+#if (ENABLE_FAN_CTRL_ROUTINE == 1)
+    /* initialize fan speed control routine */
+    init_completion(&data->fanctrl_update_stop);
+    init_completion(&data->fanctrl_suspend);
+    data->fanctrl_disabled = 0;
+    data->fanctrl_tsk = kthread_run(fan_speed_ctrl_routine, client, "accton_t600_fanctl");
+
+    if (IS_ERR(data->fanctrl_tsk)) {
+        status = PTR_ERR(data->fanctrl_tsk);
+        goto exit_remove;
+    }
+#endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
+
     return 0;
 
 exit_remove:
@@ -627,7 +995,12 @@ exit:
 static int t600_fan_remove(struct i2c_client *client)
 {
     struct t600_fan_data *data = i2c_get_clientdata(client);
-    
+
+#if (ENABLE_FAN_CTRL_ROUTINE == 1)
+    kthread_stop(data->fanctrl_tsk);
+    wait_for_completion(&data->fanctrl_update_stop);
+#endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
+
     hwmon_device_unregister(data->hwmon_dev);
     sysfs_remove_group(&client->dev.kobj, &t600_fan_group);
     kfree(data);
diff --git a/drivers/misc/accton_t600_fj_mdec.c b/drivers/misc/accton_t600_fj_mdec.c
index 279cbf8..0391657 100644
--- a/drivers/misc/accton_t600_fj_mdec.c
+++ b/drivers/misc/accton_t600_fj_mdec.c
@@ -134,7 +134,7 @@ enum fpga_register_map
 
 enum fpga_sysfs_attributes
 {
-    CPLD_VERSION_ATTR, DCO_MDIO_OFFSET_ATTR, DCO_MDIO_ATTR, MDEC_OFFSET_ATTR, MDEC_ATTR, MDEC_EEPROM_ATTR, QSFP_OFFSET_ATTR, QSFP_ATTR, PORT1_EEPROM_0, PORT1_EEPROM_1, PORT1_EEPROM_2, PORT1_EEPROM_3,
+    CPLD_VERSION_ATTR, DCO_MDIO_OFFSET_ATTR, DCO_MDIO_ATTR, MDEC_OFFSET_ATTR, MDEC_ATTR, MDEC_EEPROM_ATTR, TEMP1_INPUT, TEMP2_INPUT, QSFP_OFFSET_ATTR, QSFP_ATTR, PORT1_EEPROM_0, PORT1_EEPROM_1, PORT1_EEPROM_2, PORT1_EEPROM_3,
     PORT2_EEPROM_0, PORT2_EEPROM_1, PORT2_EEPROM_2, PORT2_EEPROM_3, PORT3_EEPROM_0, PORT3_EEPROM_1, PORT3_EEPROM_2, PORT3_EEPROM_3, PORT4_EEPROM_0, PORT4_EEPROM_1, PORT4_EEPROM_2, PORT4_EEPROM_3,
     PORT5_EEPROM_0, PORT5_EEPROM_1, PORT5_EEPROM_2, PORT5_EEPROM_3, PORT6_EEPROM_0, PORT6_EEPROM_1, PORT6_EEPROM_2, PORT6_EEPROM_3, PORT7_EEPROM_0, PORT7_EEPROM_1, PORT7_EEPROM_2, PORT7_EEPROM_3,
     PORT8_EEPROM_0, PORT8_EEPROM_1, PORT8_EEPROM_2, PORT8_EEPROM_3, PORT9_EEPROM_0, PORT9_EEPROM_1, PORT9_EEPROM_2, PORT9_EEPROM_3, PORT10_EEPROM_0, PORT10_EEPROM_1, PORT10_EEPROM_2, PORT10_EEPROM_3,
@@ -222,25 +222,13 @@ static ssize_t qsfp_read_result(struct device* dev, struct device_attribute* att
     return sprintf(buf, "0x%02X\n", qsfp_read_result_data);
 } 
 
-static ssize_t mdio_action_store(struct device* dev, struct device_attribute* attr, const char* buf, size_t count)
+/* Refer to sheet "21.Driver Control" of "T600_DHAL Specification_v1.6.xlsx" */
+static u32 mdio_access(struct device* dev, u32 mode, u32 page, u32 address, u32 data)
 {
-    u32 mode, page, address, data, status;
-    struct fpga_device* fpga_dev = NULL;
+    struct fpga_device* fpga_dev = dev_get_drvdata(dev);
+    u32 status;
     int i = 0;
 
-    fpga_dev = dev_get_drvdata(dev);
-
-    if(sscanf(buf, "0x%x 0x%x 0x%x 0x%x",&mode, &page, &address, &data) != 4)
-    {
-        return  - EINVAL;
-    } 
-
-    if(mode > MDIO_WRITE_MODE)
-    {
-        printk(KERN_WARNING "[ERR] mode ERR, mode range is 0X0000 ~0x0001 \r\n");
-        return  - EINVAL;
-    }
-    
     mutex_lock(&fpga_dev->driver_lock);
     // Check MDIO busy status
     for(i = 0; i < MDIO_STATUS_CHK_RETRY_COUNT ; i++)
@@ -329,10 +317,35 @@ MDIO_READ_BEGIN:
             printk(KERN_DEBUG "[DEBUG] I2C bus busy, 1retry count =%d\r\n", i);
         }   
         // Read data
-        mdio_read_result_data = t600_fj_mdec_read32(fpga_dev->hw_addr + BMD_BUS_MDIO_RD_DT);
+        status = t600_fj_mdec_read32(fpga_dev->hw_addr + BMD_BUS_MDIO_RD_DT);
     }
     
     mutex_unlock(&fpga_dev->driver_lock);
+
+    return status;
+}
+
+static ssize_t mdio_action_store(struct device* dev, struct device_attribute* attr, const char* buf, size_t count)
+{
+    u32 mode, page, address, data, status;
+
+    if(sscanf(buf, "0x%x 0x%x 0x%x 0x%x",&mode, &page, &address, &data) != 4)
+    {
+        return  - EINVAL;
+    }
+
+    if(mode > MDIO_WRITE_MODE)
+    {
+        printk(KERN_WARNING "[ERR] mode ERR, mode range is 0X0000 ~0x0001 \r\n");
+        return  - EINVAL;
+    }
+
+    status = mdio_access(dev, mode, page, address, data);
+    if((mode == MDIO_READ_MODE) && (status > 0))
+    {
+        mdio_read_result_data = status;
+    }
+
     return count;
 }
 
@@ -408,6 +421,21 @@ static ssize_t qsfp_action_store(struct device* dev, struct device_attribute* at
     return count;
 }
 
+static ssize_t temp_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+    struct sensor_device_attribute* dev_attr = to_sensor_dev_attr(attr);
+    u32 value;
+
+    /* Refer to appendix_DCO_MDIO_IO_MAP(Preliminary).xlsx */
+    value = mdio_access(dev, MDIO_READ_MODE, (dev_attr->index - TEMP1_INPUT), 0xee76, 0x0);
+    if(value <= 0)
+    {
+        /* 1 degree Celsius as default */
+        value = 1;
+    }
+
+    return sprintf(buf, "%d\n", value*1000);
+}
 static ssize_t read_port_eeprom(struct device* dev, struct device_attribute* attr, char* buf)
 {
     struct sensor_device_attribute* dev_attr = to_sensor_dev_attr(attr);
@@ -621,6 +649,7 @@ static ssize_t read_port_eeprom(struct device* dev, struct device_attribute* att
     return QSFP_EEPROM_SIZE;
 }
 
+/* refer to sheet "QSFP28_Driver" of "03_05_QSFP28_Driver_Specification_v0.4.xlsx" */
 static void write_port_eeprom_one_byte(struct fpga_device* fpga_dev, u8 port, u8 pos, u8 value)
 {
     u32 set_add, set_dt, status;
@@ -745,6 +774,8 @@ static u8 read_port_eeprom_one_byte(struct fpga_device* fpga_dev, u8 port, u8 po
 static SENSOR_DEVICE_ATTR(cpld_version, S_IRUGO, cpld_version_show, NULL, CPLD_VERSION_ATTR);
 static SENSOR_DEVICE_ATTR(dco_mdio_offset, S_IWUSR, NULL, mdio_action_store, DCO_MDIO_OFFSET_ATTR);
 static SENSOR_DEVICE_ATTR(dco_mdio, S_IRUGO, mdio_read_result, NULL, DCO_MDIO_ATTR);
+static SENSOR_DEVICE_ATTR(temp1_input, S_IRUGO, temp_show, NULL, TEMP1_INPUT);
+static SENSOR_DEVICE_ATTR(temp2_input, S_IRUGO, temp_show, NULL, TEMP2_INPUT);
 static SENSOR_DEVICE_ATTR(mdec_offset, S_IWUSR, NULL, mdec_action_store, MDEC_OFFSET_ATTR);
 static SENSOR_DEVICE_ATTR(mdec, S_IRUGO, mdec_read_result, NULL, MDEC_ATTR);
 static SENSOR_DEVICE_ATTR(mdec_eeprom, S_IRUGO, read_mdec_eeprom, NULL, MDEC_EEPROM_ATTR);
@@ -839,7 +870,8 @@ DECLARE_PORT12_EEPROM_SENSOR_DEV_ATTR(3);
 
 static struct attribute* sysfs_attributes[] = 
 {
-    &sensor_dev_attr_cpld_version.dev_attr.attr, &sensor_dev_attr_dco_mdio_offset.dev_attr.attr, &sensor_dev_attr_dco_mdio.dev_attr.attr, &sensor_dev_attr_mdec_offset.dev_attr.attr, &sensor_dev_attr_mdec.dev_attr.attr, &sensor_dev_attr_mdec_eeprom.dev_attr.attr, &sensor_dev_attr_qsfp_offset.dev_attr.attr, &sensor_dev_attr_qsfp.dev_attr.attr, DECLARE_PORT1_EEPROM_ATTR(0), DECLARE_PORT1_EEPROM_ATTR(1), DECLARE_PORT1_EEPROM_ATTR(2), DECLARE_PORT1_EEPROM_ATTR(3),
+    &sensor_dev_attr_cpld_version.dev_attr.attr, &sensor_dev_attr_dco_mdio_offset.dev_attr.attr, &sensor_dev_attr_dco_mdio.dev_attr.attr, &sensor_dev_attr_mdec_offset.dev_attr.attr, &sensor_dev_attr_mdec.dev_attr.attr, &sensor_dev_attr_mdec_eeprom.dev_attr.attr, &sensor_dev_attr_temp1_input.dev_attr.attr, &sensor_dev_attr_temp2_input.dev_attr.attr,
+    &sensor_dev_attr_qsfp_offset.dev_attr.attr, &sensor_dev_attr_qsfp.dev_attr.attr, DECLARE_PORT1_EEPROM_ATTR(0), DECLARE_PORT1_EEPROM_ATTR(1), DECLARE_PORT1_EEPROM_ATTR(2), DECLARE_PORT1_EEPROM_ATTR(3),
     DECLARE_PORT2_EEPROM_ATTR(0), DECLARE_PORT2_EEPROM_ATTR(1), DECLARE_PORT2_EEPROM_ATTR(2), DECLARE_PORT2_EEPROM_ATTR(3),DECLARE_PORT3_EEPROM_ATTR(0), DECLARE_PORT3_EEPROM_ATTR(1), DECLARE_PORT3_EEPROM_ATTR(2), DECLARE_PORT3_EEPROM_ATTR(3),DECLARE_PORT4_EEPROM_ATTR(0), DECLARE_PORT4_EEPROM_ATTR(1), DECLARE_PORT4_EEPROM_ATTR(2), DECLARE_PORT4_EEPROM_ATTR(3),
     DECLARE_PORT5_EEPROM_ATTR(0), DECLARE_PORT5_EEPROM_ATTR(1), DECLARE_PORT5_EEPROM_ATTR(2), DECLARE_PORT5_EEPROM_ATTR(3),DECLARE_PORT6_EEPROM_ATTR(0), DECLARE_PORT6_EEPROM_ATTR(1), DECLARE_PORT6_EEPROM_ATTR(2), DECLARE_PORT6_EEPROM_ATTR(3),DECLARE_PORT7_EEPROM_ATTR(0), DECLARE_PORT7_EEPROM_ATTR(1), DECLARE_PORT7_EEPROM_ATTR(2), DECLARE_PORT7_EEPROM_ATTR(3),
     DECLARE_PORT8_EEPROM_ATTR(0), DECLARE_PORT8_EEPROM_ATTR(1), DECLARE_PORT8_EEPROM_ATTR(2), DECLARE_PORT8_EEPROM_ATTR(3),DECLARE_PORT9_EEPROM_ATTR(0), DECLARE_PORT9_EEPROM_ATTR(1), DECLARE_PORT9_EEPROM_ATTR(2), DECLARE_PORT9_EEPROM_ATTR(3),DECLARE_PORT10_EEPROM_ATTR(0), DECLARE_PORT10_EEPROM_ATTR(1), DECLARE_PORT10_EEPROM_ATTR(2), DECLARE_PORT10_EEPROM_ATTR(3),
-- 
1.9.1

