From 00a4145a3c402341018d50e1632090bc3ad5045e Mon Sep 17 00:00:00 2001
From: aken_liu <aken_liu@accton.com.tw>
Date: Wed, 13 Mar 2019 18:56:26 +0800
Subject: [PATCH] Add PIU scan mutex. Application must use this mutex to lock
 PCI access command.

---
 drivers/misc/accton_t600_fj_mdec.c | 51 +++++++++++++++++++++++++++++---------
 1 file changed, 39 insertions(+), 12 deletions(-)

diff --git a/drivers/misc/accton_t600_fj_mdec.c b/drivers/misc/accton_t600_fj_mdec.c
index b3a8813..6ed77a4 100644
--- a/drivers/misc/accton_t600_fj_mdec.c
+++ b/drivers/misc/accton_t600_fj_mdec.c
@@ -143,7 +143,7 @@ enum fpga_sysfs_attributes
     PORT5_EEPROM_0, PORT5_EEPROM_1, PORT5_EEPROM_2, PORT5_EEPROM_3, PORT6_EEPROM_0, PORT6_EEPROM_1, PORT6_EEPROM_2, PORT6_EEPROM_3, PORT7_EEPROM_0, PORT7_EEPROM_1, PORT7_EEPROM_2, PORT7_EEPROM_3,
     PORT8_EEPROM_0, PORT8_EEPROM_1, PORT8_EEPROM_2, PORT8_EEPROM_3, PORT9_EEPROM_0, PORT9_EEPROM_1, PORT9_EEPROM_2, PORT9_EEPROM_3, PORT10_EEPROM_0, PORT10_EEPROM_1, PORT10_EEPROM_2, PORT10_EEPROM_3,
     PORT11_EEPROM_0, PORT11_EEPROM_1, PORT11_EEPROM_2, PORT11_EEPROM_3, PORT12_EEPROM_0, PORT12_EEPROM_1, PORT12_EEPROM_2, PORT12_EEPROM_3, 
-    PIU1_DCO_MDIO_LOCK, PIU2_DCO_MDIO_LOCK, PIU1_QSFP_LOCK, PIU2_QSFP_LOCK,
+    PIU1_DCO_MDIO_LOCK, PIU2_DCO_MDIO_LOCK, PIU1_QSFP_LOCK, PIU2_QSFP_LOCK, MDEC_LOCK, PIU_RESCAN_LOCK,
 };
 
 struct fpga_device
@@ -157,6 +157,7 @@ struct fpga_device
     struct mutex app_piu2_qsfp_lock;
     struct mutex app_piu1_dco_mdio_lock;
     struct mutex app_piu2_dco_mdio_lock;
+    struct mutex app_piu_rescan;
     struct device dev;
 
     /* for read data */
@@ -444,6 +445,7 @@ static ssize_t app_lock_store(struct device* dev, struct device_attribute* attr,
 {
     u32 is_locked;
     struct fpga_device* fpga_dev = dev_get_drvdata(dev);
+    struct sensor_device_attribute* dev_attr = to_sensor_dev_attr(attr);
 
     if(sscanf(buf, "%d", &is_locked) != 1)
     {
@@ -455,17 +457,39 @@ static ssize_t app_lock_store(struct device* dev, struct device_attribute* attr,
         return  - EINVAL;
     }
 
-    if(is_locked)
-    {
-        mutex_lock(&fpga_dev->app_lock);
-    }
-    else
+    switch(dev_attr->index)
     {
-        /* The lock is not work if user unlock before lock, so we ignore command if it is not locked.*/
-        if(1 == mutex_is_locked(&fpga_dev->app_lock))
-        {
-            mutex_unlock(&fpga_dev->app_lock);
-        }
+        case MDEC_LOCK:
+            if(is_locked)
+            {
+                mutex_lock(&fpga_dev->app_lock);
+            }
+            else
+            {
+                /* The lock is not work if user unlock before lock, so we ignore command if it is not locked.*/
+                if(1 == mutex_is_locked(&fpga_dev->app_lock))
+                {
+                    mutex_unlock(&fpga_dev->app_lock);
+                }
+            }
+            break;
+        case PIU_RESCAN_LOCK:
+            if(is_locked)
+            {
+                mutex_lock(&fpga_dev->app_piu_rescan);
+            }
+            else
+            {
+                /* The lock is not work if user unlock before lock, so we ignore command if it is not locked.*/
+                if(1 == mutex_is_locked(&fpga_dev->app_piu_rescan))
+                {
+                    mutex_unlock(&fpga_dev->app_piu_rescan);
+                }
+            }
+            break;
+        default:
+            printk (KERN_ERR "lock/unlock fail. \r\n");
+            break;
     }
 
     return count;
@@ -950,11 +974,12 @@ static SENSOR_DEVICE_ATTR(mdec, S_IRUGO, mdec_read_result, NULL, MDEC_ATTR);
 static SENSOR_DEVICE_ATTR(mdec_eeprom, S_IRUGO, read_mdec_eeprom, NULL, MDEC_EEPROM_ATTR);
 static SENSOR_DEVICE_ATTR(qsfp_offset, S_IWUSR, NULL, qsfp_action_store, QSFP_OFFSET_ATTR);
 static SENSOR_DEVICE_ATTR(qsfp, S_IRUGO, qsfp_read_result, NULL, QSFP_ATTR);
-static SENSOR_DEVICE_ATTR(app_locked, S_IWUSR, NULL, app_lock_store, 0);
+static SENSOR_DEVICE_ATTR(app_locked, S_IWUSR, NULL, app_lock_store, MDEC_LOCK);
 static SENSOR_DEVICE_ATTR(app_piu1_dco_mdio_locked, S_IWUSR, NULL, app_dco_mdio_lock_store, PIU1_DCO_MDIO_LOCK);
 static SENSOR_DEVICE_ATTR(app_piu2_dco_mdio_locked, S_IWUSR, NULL, app_dco_mdio_lock_store, PIU2_DCO_MDIO_LOCK);
 static SENSOR_DEVICE_ATTR(app_piu1_qsfp_locked, S_IWUSR, NULL, app_qsfp_lock_store, PIU1_QSFP_LOCK);
 static SENSOR_DEVICE_ATTR(app_piu2_qsfp_locked, S_IWUSR, NULL, app_qsfp_lock_store, PIU2_QSFP_LOCK);
+static SENSOR_DEVICE_ATTR(app_rescan_locked, S_IWUSR, NULL, app_lock_store, PIU_RESCAN_LOCK);
 
 #define DECLARE_PORT1_EEPROM_SENSOR_DEV_ATTR(index) \
 static SENSOR_DEVICE_ATTR(port1_eeprom_##index, S_IRUGO, read_port_eeprom, NULL, PORT1_EEPROM_##index);
@@ -1053,6 +1078,7 @@ static struct attribute* sysfs_attributes[] =
     &sensor_dev_attr_app_locked.dev_attr.attr, 
     &sensor_dev_attr_app_piu1_dco_mdio_locked.dev_attr.attr, &sensor_dev_attr_app_piu2_dco_mdio_locked.dev_attr.attr, 
     &sensor_dev_attr_app_piu1_qsfp_locked.dev_attr.attr, &sensor_dev_attr_app_piu2_qsfp_locked.dev_attr.attr,
+    &sensor_dev_attr_app_rescan_locked.dev_attr.attr,
     NULL,
 };
 
@@ -1107,6 +1133,7 @@ static int accton_fpga_probe(struct pci_dev* pdev, const struct pci_device_id* d
     mutex_init(&fpga_dev->app_piu2_dco_mdio_lock);
     mutex_init(&fpga_dev->app_piu1_qsfp_lock);
     mutex_init(&fpga_dev->app_piu2_qsfp_lock);
+    mutex_init(&fpga_dev->app_piu_rescan);
     mutex_init(&io_lock);
 
     pci_set_drvdata(pdev, fpga_dev);
-- 
1.9.1

