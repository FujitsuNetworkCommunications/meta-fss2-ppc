From 29dbfab0e60ba74b1bab7c118c93aea16c292372 Mon Sep 17 00:00:00 2001
From: "Barlow, Terry" <Terry.Barlow@us.fujitsu.com>
Date: Wed, 6 Feb 2019 11:42:29 -0600
Subject: [PATCH] 4.1-modify-non-linear-sk_buff-append-bytes-in-Head

---
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c |  24 ++++-
 .../net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c  | 109 +++++++++++----------
 2 files changed, 75 insertions(+), 58 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
index a718e5a..bde65ca 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
@@ -265,9 +265,21 @@ static void _dpa_rx_error(struct net_device *net_dev,
 	if (likely(fd->status & FM_FD_STAT_ERR_PHYSICAL))
 		pr_warn_once("fsl-dpa: non-zero error counters in fman statistics (sysfs)\n");
 	else
-		if (netif_msg_hw(priv) && net_ratelimit())
+		if (netif_msg_hw(priv) && net_ratelimit()){
+                /*MTU+BRCM TAG is over size*/
+                if (unlikely(fd->status & FM_FD_STAT_RX_ERRORS) != 0) {
+                    u32 fd_status = fd->status;
+                    if(unlikely(fd_status & FM_PORT_FRM_ERR_SIZE)!=0){               
+                        fd_status = fd_status & ~FM_PORT_FRM_ERR_SIZE;
+                        if(unlikely(fd_status & FM_PORT_FRM_ERR_SIZE)==0)
+                            return;
+                    }            
+                }
+          
 			netdev_dbg(net_dev, "Err FD status = 0x%08x\n",
 					fd->status & FM_FD_STAT_RX_ERRORS);
+                    printk("(%s:%d) ERR FD\n\r",__FUNCTION__,__LINE__);
+		    }
 #ifdef CONFIG_FSL_DPAA_HOOKS
 	if (dpaa_eth_hooks.rx_error &&
 		dpaa_eth_hooks.rx_error(net_dev, fd, fqid) == DPAA_ETH_STOLEN)
@@ -298,9 +310,11 @@ static void _dpa_tx_error(struct net_device		*net_dev,
 {
 	struct sk_buff *skb;
 
-	if (netif_msg_hw(priv) && net_ratelimit())
+	if (netif_msg_hw(priv) && net_ratelimit()){
 		netdev_warn(net_dev, "FD status = 0x%08x\n",
 				fd->status & FM_FD_STAT_TX_ERRORS);
+            printk("(%s:%d) ERR FD\n\r",__FUNCTION__,__LINE__);
+	    }
 #ifdef CONFIG_FSL_DPAA_HOOKS
 	if (dpaa_eth_hooks.tx_error &&
 		dpaa_eth_hooks.tx_error(net_dev, fd, fqid) == DPAA_ETH_STOLEN)
@@ -396,13 +410,15 @@ static void __hot _dpa_tx_conf(struct net_device	*net_dev,
 {
 	struct sk_buff	*skb;
 
+
 	/* do we need the timestamp for the error frames? */
 
 	if (unlikely(fd->status & FM_FD_STAT_TX_ERRORS) != 0) {
-		if (netif_msg_hw(priv) && net_ratelimit())
+		if (netif_msg_hw(priv) && net_ratelimit()){
 			netdev_warn(net_dev, "FD status = 0x%08x\n",
 					fd->status & FM_FD_STAT_TX_ERRORS);
-
+            printk("(%s:%d) ERR FD\n\r",__FUNCTION__,__LINE__);
+	    }
 		percpu_priv->stats.tx_errors++;
 	}
 
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
index 4b2c125..d7f453e 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
@@ -145,15 +145,15 @@ static void dpa_remove_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
 {
 #if 1
        int length= skb->len;
-       unsigned char new_data[4096]={0};
+       unsigned char new_data[CONFIG_FSL_FM_MAX_FRAME_SIZE]={0};
        int needed=sizeof(struct brcm_tag);
+
        memcpy(new_data,skb->data,12);
        memcpy(new_data+12,skb->data+12+sizeof(struct brcm_tag),length-12-sizeof(struct brcm_tag));
        
         skb->len = length-needed;
         skb->tail-=needed;
         memcpy(skb->data,new_data,skb->len);
-
 #endif     
 }
 int dpa_append_buffer_to_skb(struct sk_buff *skb, unsigned char* src, int length)
@@ -161,7 +161,7 @@ int dpa_append_buffer_to_skb(struct sk_buff *skb, unsigned char* src, int length
     int ret=0;
     int offset = 0;
     void *to =src;
-    int len = length-10;
+    int len = length;
 	int start = skb_headlen(skb);
 	struct sk_buff *frag_iter;
 	int i, copy;
@@ -202,7 +202,7 @@ int dpa_append_buffer_to_skb(struct sk_buff *skb, unsigned char* src, int length
 			if ((len -= copy) == 0){
              			offset += copy;
         			to     += copy;
-				goto add_extend;
+        			return 0;
 			}
 			offset += copy;
 			to     += copy;
@@ -211,31 +211,18 @@ int dpa_append_buffer_to_skb(struct sk_buff *skb, unsigned char* src, int length
 	}
 
 
-    /*if len is 0, means old buffer is re-writte, need apped 10 bytes*/
-add_extend:    
-    if(len==0){ 
-    u8 *vaddr;
-        copy = 10;
-        i = skb_shinfo(skb)->nr_frags-1;
-        skb_frag_t *f = &skb_shinfo(skb)->frags[i];
-        skb_frag_size_add(f,copy);
-        vaddr = kmap_atomic(skb_frag_page(f));
-	memcpy(vaddr + f->page_offset + offset - start,
-                            to,
-			       copy); 
-	kunmap_atomic(vaddr);
-        skb->len += copy;
-	 skb->data_len += copy;
-	 skb->truesize += copy;
-    }
-
-	if (!len)
-		return 0;
+    if(!len)
+        return 0;
 
 fault:
 	return -EFAULT;
 }
 
+int dpa_append_bcm_tag_compare(unsigned char* src, unsigned char* dst, int length)
+{
+    return (memcmp(src,dst,length));
+}
+
 int dpa_append_bcm_tag_buffer(unsigned char* src, unsigned char* dst, int length)
 {
 #if 1
@@ -272,14 +259,14 @@ int dpa_append_bcm_tag_buffer(unsigned char* src, unsigned char* dst, int length
     
     new_lebgth +=4;
 #endif
-    //memcpy(dst,src,length);
     return new_lebgth;
 
 }
 
 void dpa_append_bcm_tag_nonlinear(struct sk_buff *skb, struct net_device *net_dev)
 {
-    unsigned char ori_data[4096]={0};
+    unsigned char ori_data[CONFIG_FSL_FM_MAX_FRAME_SIZE]={0};
+    unsigned char data[CONFIG_FSL_FM_MAX_FRAME_SIZE]={0};    
     int len_ori=0,len_new=0;
     int copy_counter_new=0;
 
@@ -288,39 +275,39 @@ void dpa_append_bcm_tag_nonlinear(struct sk_buff *skb, struct net_device *net_de
     int needed=sizeof(struct brcm_tag)+BRCM_FCS_SIZE;
         /*BPDU header*/
     int ret;
-    unsigned char* data=NULL;
 
-
-    /*printk("(%s:%d),skb headroom:%d, tailroom:%d,availroom:%d,skb->data_len:%d,skb->len:%d,skb_end_offset:%d\n\r",__FUNCTION__,__LINE__,skb_headroom(skb), skb_tailroom(skb), skb_availroom(skb),skb->data_len,skb->len,skb_end_offset(skb));  */
+    /*printk("(%s:%d),skb headroom:%d, tailroom:%d,availroom:%d,skb->data_len:%d,skb->len:%d,skb_end_offset:%d\n\r",__FUNCTION__,__LINE__,skb_headroom(skb), skb_tailroom(skb), skb_availroom(skb),skb->data_len,skb->len,skb_end_offset(skb));  
+    printk("(%s:%d) dump ori data (%d)\n\r",__FUNCTION__,__LINE__,length);    
+    dump_packet(ori_data,length);*/
 
     ret = skb_copy_bits(skb,0,ori_data,length);
     if(ret!=0)
            return;
-    /*printk("(%s:%d) dump ori data (%d)\n\r",__FUNCTION__,__LINE__,length);    
-    dump_packet(ori_data,length);*/
 
-    data = kmalloc(length + 10,GFP_ATOMIC);
-    memset(data,0,length + 10);
     len_new = dpa_append_bcm_tag_buffer(ori_data,data,length);
 
     /*printk("(%s:%d) dump new data (%d)\n\r",__FUNCTION__,__LINE__,len_new);    
-    //dump_packet(data,len_new);*/
-
+    dump_packet(data,len_new);*/
+    ret = pskb_expand_head(skb, 0, needed, GFP_ATOMIC);
+		if (ret){
+                    //kfree(new_data);
+		    return;
+    }
+    skb->len += needed;
+    
     dpa_append_buffer_to_skb(skb,data,len_new);    
 
+/*
     memset(ori_data,0,len_new);
     ret = skb_copy_bits(skb,0,ori_data,len_new);
-    if(ret!=0)
+    if(ret!=0){
            return;
-    /*printk("(%s:%d) dump new data (%d)\n\r",__FUNCTION__,__LINE__,len_new);    
-    dump_packet(ori_data,len_new);*/
-
-
-
-    if(data!=NULL)
-            kfree(data);
+     }
+    ret = dpa_append_bcm_tag_compare(ori_data,data,len_new);
+    printk("(%s:%d) dump new data (%d), compare result:%d\n\r",__FUNCTION__,__LINE__,len_new, ret);    
+    dump_packet(ori_data,len_new);
     
-/*    printk("(%s:%d),skb headroom:%d, tailroom:%d,availroom:%d,skb->data_len:%d,skb->len:%d,skb_end_offset:%d\n\r",__FUNCTION__,__LINE__,skb_headroom(skb), skb_tailroom(skb), skb_availroom(skb),skb->data_len,skb->len,skb_end_offset(skb));    */
+    printk("(%s:%d),skb headroom:%d, tailroom:%d,availroom:%d,skb->data_len:%d,skb->len:%d,skb_end_offset:%d\n\r",__FUNCTION__,__LINE__,skb_headroom(skb), skb_tailroom(skb), skb_availroom(skb),skb->data_len,skb->len,skb_end_offset(skb));    */
     return;
 }
 
@@ -339,12 +326,15 @@ void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
 	//int headerlen = skb_headroom(skb);
 	//unsigned int size = skb_end_offset(skb) + sizeof(struct brcm_tag)+BRCM_FCS_SIZE;
 #if 1
-       unsigned char new_data[4096]={0};
-
+        unsigned char new_data[CONFIG_FSL_FM_MAX_FRAME_SIZE]={0}; 
 
         if(skb_is_nonlinear(skb)==1){
             return dpa_append_bcm_tag_nonlinear(skb,net_dev);
         }
+        //new_data = kmalloc(length + 10,GFP_KERNEL);
+        //if(new_data==0)         return;
+
+        
        memcpy(new_data,skb->data,12);
 	/*COPY brcm_tag*/
         /* Add broadcom management tag*/
@@ -401,12 +391,13 @@ void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
 #else
     if (unlikely(skb_tailroom(skb) < needed)) {
 		ret = pskb_expand_head(skb, 0, needed, GFP_ATOMIC);
-		if (ret)
-			return;
+		if (ret){
+		    return;
+		}
     }
-   
+
     if (unlikely(skb_tailroom(skb) >= needed))    {
-	skb_put(skb, needed);
+       skb_put(skb, needed);
        memcpy(skb->data,new_data,skb->len);
        skb->no_fcs =1;
        skb->protocol =htons(BRCM_TYPE);
@@ -416,7 +407,6 @@ void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
     }
 #endif
         //printk("(%s:%d),skb headroom:%d, tailroom:%d,availroom:%d,skb->data_len:%d,skb->len:%d,skb_end_offset:%d\n\r",__FUNCTION__,__LINE__,skb_headroom(skb), skb_tailroom(skb), skb_availroom(skb),skb->data_len,skb->len,skb_end_offset(skb));
-
 #endif    
 }
 
@@ -969,8 +959,15 @@ void __hot _dpa_rx(struct net_device *net_dev,
 	struct rtnl_link_stats64 *percpu_stats = &percpu_priv->stats;
 	int use_gro = net_dev->features & NETIF_F_GRO;
 
-	if (unlikely(fd_status & FM_FD_STAT_RX_ERRORS) != 0) {
+    /*MTU+BRCM TAG is over size*/
+       if (unlikely(fd_status & FM_FD_STAT_RX_ERRORS) != 0) {
+            if(unlikely(fd_status & FM_PORT_FRM_ERR_SIZE)!=0){                
+                fd_status=fd_status& ~FM_PORT_FRM_ERR_SIZE;
+            }            
+       }
+       if (unlikely(fd_status & FM_FD_STAT_RX_ERRORS) != 0) {
 		if (netif_msg_hw(priv) && net_ratelimit())
+
 			netdev_warn(net_dev, "FD status = 0x%08x\n",
 					fd_status & FM_FD_STAT_RX_ERRORS);
 
@@ -1456,8 +1453,12 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 	if(strcmp(net_dev->name,CPU_PORT_INTERFACE)==0||strcmp(net_dev->name,CPU_PORT_INTERFACE2)==0)
 	{
 	       if(skb->ip_summed==3) {skb_checksum_help(skb);skb->ip_summed=2;}
-		/*dump_packet(skb->data,skb->len+16);*/ 
-		dpa_append_bcm_tag(skb,net_dev);
+		/*dump_packet(skb->data,skb->len+16);*/
+                if(skb_is_nonlinear(skb)==1){
+                    dpa_append_bcm_tag_nonlinear(skb,net_dev);
+                }
+                else
+		    dpa_append_bcm_tag(skb,net_dev);
 		/*dump_packet(skb->data,skb->len+16);*/
 	}
 #ifdef CONFIG_FSL_DPAA_HOOKS
-- 
1.8.3.1

