From 81c6a2d414dd2b5150548685c2116cb0f14ed3df Mon Sep 17 00:00:00 2001
From: "Barlow, Terry" <Terry.Barlow@us.fujitsu.com>
Date: Wed, 6 Feb 2019 14:06:38 -0600
Subject: [PATCH] 4.1-modify-dpa-RX-TX-to-support-mtu-to-9000

---
 .../net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c  | 115 ++++++++++++++-------
 1 file changed, 75 insertions(+), 40 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
index d7f453e..f35fc35 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
@@ -145,25 +145,40 @@ static void dpa_remove_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
 {
 #if 1
        int length= skb->len;
-       unsigned char new_data[CONFIG_FSL_FM_MAX_FRAME_SIZE]={0};
        int needed=sizeof(struct brcm_tag);
-
-       memcpy(new_data,skb->data,12);
-       memcpy(new_data+12,skb->data+12+sizeof(struct brcm_tag),length-12-sizeof(struct brcm_tag));
+       unsigned char new_data[1500]={0};
+       int left_length=length-needed;
+       int copy_length=0;
+
+       //memcpy(new_data,skb->data,12);
+       left_length-=12;
+       copy_length=12;
+       //memcpy(new_data+12,skb->data+12+sizeof(struct brcm_tag),length-12-sizeof(struct brcm_tag));
        
         skb->len = length-needed;
         skb->tail-=needed;
-        memcpy(skb->data,new_data,skb->len);
+        while(left_length>0){
+            if(left_length>=1500){
+                memcpy(new_data,skb->data+copy_length+sizeof(struct brcm_tag),1500);
+                memcpy(skb->data+copy_length,new_data,1500);
+                left_length-=1500;
+                copy_length=copy_length+1500;
+            }
+            else{
+                memcpy(new_data,skb->data+copy_length+sizeof(struct brcm_tag),left_length);
+                memcpy(skb->data+copy_length,new_data,left_length);
+                left_length=0;
+                copy_length=copy_length+left_length;
+            }
+        }
 #endif     
 }
 int dpa_append_buffer_to_skb(struct sk_buff *skb, unsigned char* src, int length)
 {
-    int ret=0;
     int offset = 0;
     void *to =src;
     int len = length;
 	int start = skb_headlen(skb);
-	struct sk_buff *frag_iter;
 	int i, copy;
 
 	if (offset > (int)skb->len - len)
@@ -227,12 +242,10 @@ int dpa_append_bcm_tag_buffer(unsigned char* src, unsigned char* dst, int length
 {
 #if 1
     struct brcm_tag brcmTag;
-    int new_lebgth=0;
+    int new_length=0;
     unsigned char multicast_bpdu_mac[5]={0x01,0x80,0xc2,0x00,0x00};
     uint32_t crc_original,crc_original2;
     
-        memcpy(dst,src,12);
-        new_lebgth+=12;
    
 	/*COPY brcm_tag*/
         /* Add broadcom management tag*/
@@ -245,53 +258,67 @@ int dpa_append_bcm_tag_buffer(unsigned char* src, unsigned char* dst, int length
             brcmTag.op = htons(BRCM_OP);
             brcmTag.port=htons(BRCM_PORT);
         }
+        /* caculate CSUM */
+	crc_original = crc32((uint32_t)length,(uint8_t*)src);
+	crc_original2 =a_htonl(crc_original);
 
+        memcpy(dst,src,12);
+        new_length+=12;    
+        memcpy(dst+new_length+sizeof(struct brcm_tag),src+new_length,length-new_length);        
+        memcpy(dst + new_length,&brcmTag,sizeof(struct brcm_tag));
 
-        memcpy(dst + new_lebgth,&brcmTag,sizeof(struct brcm_tag));
-        new_lebgth+=sizeof(struct brcm_tag);
-        memcpy(dst+new_lebgth,src+12,length-12);
-        new_lebgth = length +sizeof(struct brcm_tag);
+        new_length = length +sizeof(struct brcm_tag);
        
 	/*COPY original fcs*/
-	crc_original = crc32((uint32_t)length,(uint8_t*)src);
-	crc_original2 =a_htonl(crc_original);
-	memcpy(dst+new_lebgth,&crc_original2,4);
+
+	memcpy(dst+new_length,&crc_original2,4);
     
-    new_lebgth +=4;
+    new_length +=4;
 #endif
-    return new_lebgth;
+    return new_length;
 
 }
 
 void dpa_append_bcm_tag_nonlinear(struct sk_buff *skb, struct net_device *net_dev)
 {
-    unsigned char ori_data[CONFIG_FSL_FM_MAX_FRAME_SIZE]={0};
-    unsigned char data[CONFIG_FSL_FM_MAX_FRAME_SIZE]={0};    
-    int len_ori=0,len_new=0;
-    int copy_counter_new=0;
+    int len_new=0;
 
     int length= skb->len;
-    int headlen = skb_headlen(skb);
     int needed=sizeof(struct brcm_tag)+BRCM_FCS_SIZE;
+    void *new_data=NULL;
+    void *data=NULL;
         /*BPDU header*/
     int ret;
 
+    new_data= kmalloc(CONFIG_FSL_FM_MAX_FRAME_SIZE,GFP_KERNEL);
+    if(new_data==NULL)         return;
+
+    data= kmalloc(CONFIG_FSL_FM_MAX_FRAME_SIZE,GFP_KERNEL);
+    if(data==0)         
+    {
+        kfree(new_data);
+        return;
+    }
     /*printk("(%s:%d),skb headroom:%d, tailroom:%d,availroom:%d,skb->data_len:%d,skb->len:%d,skb_end_offset:%d\n\r",__FUNCTION__,__LINE__,skb_headroom(skb), skb_tailroom(skb), skb_availroom(skb),skb->data_len,skb->len,skb_end_offset(skb));  
     printk("(%s:%d) dump ori data (%d)\n\r",__FUNCTION__,__LINE__,length);    
     dump_packet(ori_data,length);*/
 
-    ret = skb_copy_bits(skb,0,ori_data,length);
-    if(ret!=0)
-           return;
+    ret = skb_copy_bits(skb,0,new_data,length);
+    if(ret!=0){
+        kfree(new_data);
+        kfree(data);        
+        return;
+    }
 
-    len_new = dpa_append_bcm_tag_buffer(ori_data,data,length);
+    len_new = dpa_append_bcm_tag_buffer(new_data,data,length);
 
     /*printk("(%s:%d) dump new data (%d)\n\r",__FUNCTION__,__LINE__,len_new);    
     dump_packet(data,len_new);*/
     ret = pskb_expand_head(skb, 0, needed, GFP_ATOMIC);
-		if (ret){
-                    //kfree(new_data);
-		    return;
+    if (ret){
+        kfree(new_data);
+        kfree(data);        
+        return;
     }
     skb->len += needed;
     
@@ -308,6 +335,8 @@ void dpa_append_bcm_tag_nonlinear(struct sk_buff *skb, struct net_device *net_de
     dump_packet(ori_data,len_new);
     
     printk("(%s:%d),skb headroom:%d, tailroom:%d,availroom:%d,skb->data_len:%d,skb->len:%d,skb_end_offset:%d\n\r",__FUNCTION__,__LINE__,skb_headroom(skb), skb_tailroom(skb), skb_availroom(skb),skb->data_len,skb->len,skb_end_offset(skb));    */
+    kfree(new_data);
+    kfree(data);
     return;
 }
 
@@ -325,17 +354,18 @@ void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
         unsigned char multicast_bpdu_mac[5]={0x01,0x80,0xc2,0x00,0x00};
 	//int headerlen = skb_headroom(skb);
 	//unsigned int size = skb_end_offset(skb) + sizeof(struct brcm_tag)+BRCM_FCS_SIZE;
+	int tail_need=0;
 #if 1
-        unsigned char new_data[CONFIG_FSL_FM_MAX_FRAME_SIZE]={0}; 
+        void *new_data;
 
         if(skb_is_nonlinear(skb)==1){
-            return dpa_append_bcm_tag_nonlinear(skb,net_dev);
+           return;
         }
-        //new_data = kmalloc(length + 10,GFP_KERNEL);
-        //if(new_data==0)         return;
+        new_data = kmalloc(CONFIG_FSL_FM_MAX_FRAME_SIZE,GFP_KERNEL);
+        if(new_data==NULL)         return;
 
         
-       memcpy(new_data,skb->data,12);
+        memcpy(new_data,skb->data,12);
 	/*COPY brcm_tag*/
         /* Add broadcom management tag*/
         brcmTag.type = htons(BRCM_TYPE);
@@ -390,8 +420,12 @@ void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
         //memcpy(skb->data,new_data,skb->len);
 #else
     if (unlikely(skb_tailroom(skb) < needed)) {
-		ret = pskb_expand_head(skb, 0, needed, GFP_ATOMIC);
+		tail_need = needed;
+		tail_need -= skb_tailroom(skb);
+		tail_need = max_t(int, tail_need, 0);        
+		ret = pskb_expand_head(skb, 0, tail_need, GFP_ATOMIC);
 		if (ret){
+                    kfree(new_data);
 		    return;
 		}
     }
@@ -407,7 +441,8 @@ void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
     }
 #endif
         //printk("(%s:%d),skb headroom:%d, tailroom:%d,availroom:%d,skb->data_len:%d,skb->len:%d,skb_end_offset:%d\n\r",__FUNCTION__,__LINE__,skb_headroom(skb), skb_tailroom(skb), skb_availroom(skb),skb->data_len,skb->len,skb_end_offset(skb));
-#endif    
+#endif
+    kfree(new_data);
 }
 
 
@@ -1074,7 +1109,7 @@ int __hot skb_to_contig_fd(struct dpa_priv_s *priv,
 	enum dma_data_direction dma_dir;
 	unsigned char *buffer_start;
 	int dma_map_size;
-    struct sk_buff * new_skb,*old_skb;
+	//struct sk_buff * new_skb,*old_skb;
 
 #ifndef CONFIG_FSL_DPAA_TS
 	/* Check recycling conditions; only if timestamp support is not
@@ -1180,7 +1215,7 @@ int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 	const enum dma_data_direction dma_dir = DMA_TO_DEVICE;
 	const int nr_frags = skb_shinfo(skb)->nr_frags;
 
-       struct sk_buff * new_skb,*old_skb;
+       //struct sk_buff * new_skb,*old_skb;
 
 	fd->format = qm_fd_sg;
 #ifndef CONFIG_PPC
-- 
1.8.3.1

