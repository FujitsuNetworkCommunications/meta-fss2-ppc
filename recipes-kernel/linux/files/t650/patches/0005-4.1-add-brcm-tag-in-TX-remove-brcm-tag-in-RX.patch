From 2cd0533dad780d28cbdd2dad8fd73f4c0cd22650 Mon Sep 17 00:00:00 2001
From: "Barlow, Terry" <Terry.Barlow@us.fujitsu.com>
Date: Thu, 31 Jan 2019 15:28:45 -0600
Subject: [PATCH] 4.1-add-brcm-tag-in-TX-remove-brcm-tag-in-RX

---
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_common.c  |  13 ++
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_common.h  |   3 +
 .../ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c |   7 +-
 .../net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c  | 202 ++++++++++++++++++++-
 drivers/net/ethernet/freescale/xgmac_mdio.c        |  27 +++
 5 files changed, 250 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
index d2631ec..9e6089f 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.c
@@ -463,6 +463,7 @@ static int dpa_ts_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 }
 #endif /* CONFIG_FSL_DPAA_TS */
 
+#if 0
 int dpa_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 {
 #ifdef CONFIG_FSL_DPAA_1588
@@ -492,6 +493,18 @@ int dpa_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 
 	return ret;
 }
+#endif
+
+/* add by peter huang , addd ioctl for dpaa enthernet driver
+*
+*/
+int dpa_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
+{
+	if (!dev->phydev)
+		return -EINVAL;
+	return phy_mii_ioctl(dev->phydev, rq, cmd);
+}
+
 EXPORT_SYMBOL(dpa_ioctl);
 
 int __cold dpa_remove(struct platform_device *of_dev)
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h
index 022b4c2..da1f86b 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_common.h
@@ -226,4 +226,7 @@ int dpa_proxy_set_mac_address(struct proxy_device *proxy_dev,
 int dpa_proxy_set_rx_mode(struct proxy_device *proxy_dev,
 		      struct net_device *net_dev);
 
+void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev);
+#define CPU_PORT_INTERFACE "fm1-mac3"
+#define CPU_PORT_INTERFACE2 "eth0"
 #endif /* __DPAA_ETH_COMMON_H */
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c
index b12a01e..16ee1b4 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_generic.c
@@ -782,7 +782,12 @@ static int __hot dpa_generic_tx(struct sk_buff *skb, struct net_device *netdev)
 				netdev_err(netdev, "HW csum error: %d\n", err);
 			return err;
 		}
-
+		if(strcmp(netdev->name,CPU_PORT_INTERFACE)==0||strcmp(netdev->name,CPU_PORT_INTERFACE2)==0)
+		{
+		        /*dump_packet(skb->data,skb->len+16);*/
+		        dpa_append_bcm_tag(skb,netdev);
+		        /*dump_packet(skb->data,skb->len+16);*/
+		}
 		addr = dma_map_single(bp->dev, skbh,
 				skb->len + priv->tx_headroom, DMA_TO_DEVICE);
 		if (unlikely(dma_mapping_error(bp->dev, addr))) {
diff --git a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
index 686f702..3e9e066 100644
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
@@ -52,6 +52,178 @@
 #include "dpaa_eth_ceetm.h"
 #endif
 
+/* Add for BCM management tag FCS*/
+
+#define BRCM_TYPE 0x8874
+
+#define BRCM_OP 0x0000
+#define BRCM_PORT 0x0000
+
+#define BRCM_BPDU_OP 0x6000
+#define BRCM_BPDU_PORT 0x00ff
+
+#define BRCM_FCS_SIZE 4
+struct brcm_tag {
+    uint16_t type;
+    uint16_t op;
+    //uint16_t reserved;
+    uint16_t port;
+        
+};
+
+static const uint32_t crctable[] = {
+   0x00000000L, 0x77073096L, 0xee0e612cL, 0x990951baL, 0x076dc419L, 0x706af48fL, 0xe963a535L, 0x9e6495a3L,
+   0x0edb8832L, 0x79dcb8a4L, 0xe0d5e91eL, 0x97d2d988L, 0x09b64c2bL, 0x7eb17cbdL, 0xe7b82d07L, 0x90bf1d91L,
+   0x1db71064L, 0x6ab020f2L, 0xf3b97148L, 0x84be41deL, 0x1adad47dL, 0x6ddde4ebL, 0xf4d4b551L, 0x83d385c7L,
+   0x136c9856L, 0x646ba8c0L, 0xfd62f97aL, 0x8a65c9ecL, 0x14015c4fL, 0x63066cd9L, 0xfa0f3d63L, 0x8d080df5L,
+   0x3b6e20c8L, 0x4c69105eL, 0xd56041e4L, 0xa2677172L, 0x3c03e4d1L, 0x4b04d447L, 0xd20d85fdL, 0xa50ab56bL,
+   0x35b5a8faL, 0x42b2986cL, 0xdbbbc9d6L, 0xacbcf940L, 0x32d86ce3L, 0x45df5c75L, 0xdcd60dcfL, 0xabd13d59L,
+   0x26d930acL, 0x51de003aL, 0xc8d75180L, 0xbfd06116L, 0x21b4f4b5L, 0x56b3c423L, 0xcfba9599L, 0xb8bda50fL,
+   0x2802b89eL, 0x5f058808L, 0xc60cd9b2L, 0xb10be924L, 0x2f6f7c87L, 0x58684c11L, 0xc1611dabL, 0xb6662d3dL,
+   0x76dc4190L, 0x01db7106L, 0x98d220bcL, 0xefd5102aL, 0x71b18589L, 0x06b6b51fL, 0x9fbfe4a5L, 0xe8b8d433L,
+   0x7807c9a2L, 0x0f00f934L, 0x9609a88eL, 0xe10e9818L, 0x7f6a0dbbL, 0x086d3d2dL, 0x91646c97L, 0xe6635c01L,
+   0x6b6b51f4L, 0x1c6c6162L, 0x856530d8L, 0xf262004eL, 0x6c0695edL, 0x1b01a57bL, 0x8208f4c1L, 0xf50fc457L,
+   0x65b0d9c6L, 0x12b7e950L, 0x8bbeb8eaL, 0xfcb9887cL, 0x62dd1ddfL, 0x15da2d49L, 0x8cd37cf3L, 0xfbd44c65L,
+   0x4db26158L, 0x3ab551ceL, 0xa3bc0074L, 0xd4bb30e2L, 0x4adfa541L, 0x3dd895d7L, 0xa4d1c46dL, 0xd3d6f4fbL,
+   0x4369e96aL, 0x346ed9fcL, 0xad678846L, 0xda60b8d0L, 0x44042d73L, 0x33031de5L, 0xaa0a4c5fL, 0xdd0d7cc9L,
+   0x5005713cL, 0x270241aaL, 0xbe0b1010L, 0xc90c2086L, 0x5768b525L, 0x206f85b3L, 0xb966d409L, 0xce61e49fL,
+   0x5edef90eL, 0x29d9c998L, 0xb0d09822L, 0xc7d7a8b4L, 0x59b33d17L, 0x2eb40d81L, 0xb7bd5c3bL, 0xc0ba6cadL,
+   0xedb88320L, 0x9abfb3b6L, 0x03b6e20cL, 0x74b1d29aL, 0xead54739L, 0x9dd277afL, 0x04db2615L, 0x73dc1683L,
+   0xe3630b12L, 0x94643b84L, 0x0d6d6a3eL, 0x7a6a5aa8L, 0xe40ecf0bL, 0x9309ff9dL, 0x0a00ae27L, 0x7d079eb1L,
+   0xf00f9344L, 0x8708a3d2L, 0x1e01f268L, 0x6906c2feL, 0xf762575dL, 0x806567cbL, 0x196c3671L, 0x6e6b06e7L,
+   0xfed41b76L, 0x89d32be0L, 0x10da7a5aL, 0x67dd4accL, 0xf9b9df6fL, 0x8ebeeff9L, 0x17b7be43L, 0x60b08ed5L,
+   0xd6d6a3e8L, 0xa1d1937eL, 0x38d8c2c4L, 0x4fdff252L, 0xd1bb67f1L, 0xa6bc5767L, 0x3fb506ddL, 0x48b2364bL,
+   0xd80d2bdaL, 0xaf0a1b4cL, 0x36034af6L, 0x41047a60L, 0xdf60efc3L, 0xa867df55L, 0x316e8eefL, 0x4669be79L,
+   0xcb61b38cL, 0xbc66831aL, 0x256fd2a0L, 0x5268e236L, 0xcc0c7795L, 0xbb0b4703L, 0x220216b9L, 0x5505262fL,
+   0xc5ba3bbeL, 0xb2bd0b28L, 0x2bb45a92L, 0x5cb36a04L, 0xc2d7ffa7L, 0xb5d0cf31L, 0x2cd99e8bL, 0x5bdeae1dL,
+   0x9b64c2b0L, 0xec63f226L, 0x756aa39cL, 0x026d930aL, 0x9c0906a9L, 0xeb0e363fL, 0x72076785L, 0x05005713L,
+   0x95bf4a82L, 0xe2b87a14L, 0x7bb12baeL, 0x0cb61b38L, 0x92d28e9bL, 0xe5d5be0dL, 0x7cdcefb7L, 0x0bdbdf21L,
+   0x86d3d2d4L, 0xf1d4e242L, 0x68ddb3f8L, 0x1fda836eL, 0x81be16cdL, 0xf6b9265bL, 0x6fb077e1L, 0x18b74777L,
+   0x88085ae6L, 0xff0f6a70L, 0x66063bcaL, 0x11010b5cL, 0x8f659effL, 0xf862ae69L, 0x616bffd3L, 0x166ccf45L,
+   0xa00ae278L, 0xd70dd2eeL, 0x4e048354L, 0x3903b3c2L, 0xa7672661L, 0xd06016f7L, 0x4969474dL, 0x3e6e77dbL,
+   0xaed16a4aL, 0xd9d65adcL, 0x40df0b66L, 0x37d83bf0L, 0xa9bcae53L, 0xdebb9ec5L, 0x47b2cf7fL, 0x30b5ffe9L,
+   0xbdbdf21cL, 0xcabac28aL, 0x53b39330L, 0x24b4a3a6L, 0xbad03605L, 0xcdd70693L, 0x54de5729L, 0x23d967bfL,
+   0xb3667a2eL, 0xc4614ab8L, 0x5d681b02L, 0x2a6f2b94L, 0xb40bbe37L, 0xc30c8ea1L, 0x5a05df1bL, 0x2d02ef8dL
+};
+
+static uint32_t crc32(uint32_t bytes_sz, const uint8_t *bytes)
+{
+   uint32_t crc = ~0;
+   uint32_t i;
+   for(i = 0; i < bytes_sz; ++i) {
+      crc = crctable[(crc ^ bytes[i]) & 0xff] ^ (crc >> 8);
+   }
+   return ~crc;
+}
+
+static uint32_t a_htonl(uint32_t src)
+{
+    uint32_t to=0;
+
+    to  =to + ((src&0xff000000)>>24);
+    to  =to +((src&0x00ff0000)>>8);
+    to  = to +((src&0x0000ff00)<<8);
+    to  =to +((src&0x000000ff)<<24);
+
+    
+    return to;
+}
+
+static void dump_packet(const unsigned char *buf, int cc)
+{
+	int i, j;
+	for (i = 0; i < cc; i += 16) {
+		for (j = 0; j < 16 && i + j < cc; j++)
+			printk(" %02x", buf[i + j]);
+		printk("\n\r");
+	}
+	printk("\n\r");
+}
+
+
+static void dpa_remove_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
+{
+#if 1
+       int length= skb->len;
+       unsigned char new_data[4096]={0};
+       int needed=sizeof(struct brcm_tag);
+       memcpy(new_data,skb->data,12);
+       memcpy(new_data+12,skb->data+12+sizeof(struct brcm_tag),length-12-sizeof(struct brcm_tag));
+       
+        skb->len = length-needed;
+        skb->tail-=needed;
+        memcpy(skb->data,new_data,skb->len);
+
+#endif     
+}
+
+void dpa_append_bcm_tag(struct sk_buff *skb, struct net_device *net_dev)
+{
+	uint32_t crc_brcm,crc_brcm2;
+	uint32_t crc_original,crc_original2;
+    	struct brcm_tag brcmTag;
+    	int needed=sizeof(struct brcm_tag)+BRCM_FCS_SIZE;
+        int length= skb->len;
+        /*BPDU header*/
+        unsigned char multicast_bpdu_mac[5]={0x01,0x80,0xc2,0x00,0x00};
+	//int headerlen = skb_headroom(skb);
+	//unsigned int size = skb_end_offset(skb) + sizeof(struct brcm_tag)+BRCM_FCS_SIZE;
+#if 1
+       unsigned char new_data[4096]={0};
+       memcpy(new_data,skb->data,12);
+	/*COPY brcm_tag*/
+        /* Add broadcom management tag*/
+        brcmTag.type = htons(BRCM_TYPE);
+        /*COPY brcm option and ports*/
+        if(memcmp(new_data,multicast_bpdu_mac,5)==0){
+            brcmTag.op = htons(BRCM_BPDU_OP);
+            brcmTag.port=htons(BRCM_BPDU_PORT);
+        }else{
+            brcmTag.op = htons(BRCM_OP);
+            brcmTag.port=htons(BRCM_PORT);
+        }
+    /*if packet length is small than 60, add pad to 60*/
+        if(length<60) {
+            memset(skb->data+length,0,(60-length));
+            skb_put(skb,60-length);
+            length=60;            
+        }
+
+        memcpy(new_data + 12,&brcmTag,sizeof(struct brcm_tag));
+
+        memcpy(new_data+12+sizeof(struct brcm_tag),skb->data+12,length-12);
+
+        //memcpy(new_data+12+sizeof(struct brcm_tag),skb->data+12,length-12-needed);
+
+	/*COPY original fcs*/
+	crc_original = crc32((uint32_t)length,(uint8_t*)skb->data);
+	crc_original2 =a_htonl(crc_original);
+	/*skb_put(skb_new,BRCM_FCS_SIZE);*/
+	/*printk("\nFCS : 0X%08X,0X%08X\n", crc_original,crc_original2);	*/
+	memcpy(new_data+length+sizeof(struct brcm_tag),&crc_original2,4);
+       //memcpy(new_data+length-4,&crc_original2,4); 
+
+
+	/*COPY brcm fcs*/
+	crc_brcm = crc32((uint32_t)(length+needed),(uint8_t*)new_data);
+    	crc_brcm2 =a_htonl(crc_brcm);
+	/*skb_put(skb_new,BRCM_FCS_SIZE);*/
+	/*printk("\nFCS brcm: 0X%08X,0X%08X\n", crc_brcm,crc_brcm2);*/
+
+	//memcpy(new_data+length+needed,&crc_brcm2,4);
+
+        skb_put(skb,needed);
+        memcpy(skb->data,new_data,skb->len);
+        skb->no_fcs =1;
+        skb->protocol =htons(BRCM_TYPE);
+        //memcpy(skb->data,new_data,skb->len);
+#endif    
+}
+
+
+/**/
+
+
 /* DMA map and add a page frag back into the bpool.
  * @vaddr fragment must have been allocated with netdev_alloc_frag(),
  * specifically for fitting into @dpa_bp.
@@ -632,6 +804,14 @@ void __hot _dpa_rx(struct net_device *net_dev,
 		percpu_priv->rx_sg++;
 	}
 
+/*    printk("(%s:%d) net_dev->name:%s, packet len:%d\n",__FUNCTION__,__LINE__,net_dev->name,skb->len);*/
+	if(strcmp(net_dev->name,CPU_PORT_INTERFACE)==0||strcmp(net_dev->name,CPU_PORT_INTERFACE2)==0)
+	{
+		/*dump_packet(skb->data,skb->len+16);*/
+		dpa_remove_bcm_tag(skb,net_dev);
+		/*dump_packet(skb->data,skb->len+16);*/
+	}
+
 	/* Account for either the contig buffer or the SGT buffer (depending on
 	 * which case we were in) having been removed from the pool.
 	 */
@@ -755,7 +935,12 @@ int __hot skb_to_contig_fd(struct dpa_priv_s *priv,
 			netdev_err(net_dev, "HW csum error: %d\n", err);
 		return err;
 	}
-
+	if(strcmp(net_dev->name,CPU_PORT_INTERFACE)==0||strcmp(net_dev->name,CPU_PORT_INTERFACE2)==0)
+	{
+		/*dump_packet(skb->data,skb->len+16);*/
+		dpa_append_bcm_tag(skb,net_dev);
+		/*dump_packet(skb->data,skb->len+16);printk("(%s:%d) net_dev->name:%s, packet len:%d,skb->no_fcs:%d, csum:%08x, ip_summ:%d\n",__FUNCTION__,__LINE__,net_dev->name,skb->len,skb->no_fcs,skb->csum,skb->ip_summed);*/
+	}
 	/* Fill in the rest of the FD fields */
 	fd->format = qm_fd_contig;
 	fd->length20 = skb->len;
@@ -849,6 +1034,13 @@ int __hot skb_to_sg_fd(struct dpa_priv_s *priv,
 		goto csum_failed;
 	}
 
+	if(strcmp(net_dev->name,CPU_PORT_INTERFACE)==0||strcmp(net_dev->name,CPU_PORT_INTERFACE2)==0)
+	{
+		/*dump_packet(skb->data,skb->len+16);*/
+		dpa_append_bcm_tag(skb,net_dev);
+		/*dump_packet(skb->data,skb->len+16);printk("(%s:%d) net_dev->name:%s, packet len:%d,skb->no_fcs:%d, csum:%08x, ip_summ:%d\n",__FUNCTION__,__LINE__,net_dev->name,skb->len,skb->no_fcs,skb->csum,skb->ip_summed);*/
+	}
+
 	sgt = (struct qm_sg_entry *)(sgt_buf + priv->tx_headroom);
 	sg_len = skb_headlen(skb);
 	qm_sg_entry_set_bpid(&sgt[0], 0xff);
@@ -1056,6 +1248,14 @@ int __hot dpa_tx(struct sk_buff *skb, struct net_device *net_dev)
 	const int queue_mapping = dpa_get_queue_mapping(skb);
 	struct qman_fq *egress_fq, *conf_fq;
 
+/* modify by peter, for BCM management tag*/
+	/*printk("(%s:%d) net_dev->name:%s, packet len:%d,skb->no_fcs:%d, csum:%08x, ip_summ:%d\n",__FUNCTION__,__LINE__,net_dev->name,skb->len,skb->no_fcs,skb->csum,skb->ip_summed);*/
+	if(strcmp(net_dev->name,CPU_PORT_INTERFACE)==0||strcmp(net_dev->name,CPU_PORT_INTERFACE2)==0)
+	{
+		/*dump_packet(skb->data,skb->len+16);*/ if(skb->ip_summed==3) {skb_checksum_help(skb);skb->ip_summed=2;}
+		/*dpa_append_bcm_tag(skb,net_dev);*/
+		/*dump_packet(skb->data,skb->len+16);*/
+	}
 #ifdef CONFIG_FSL_DPAA_HOOKS
 	/* If there is a Tx hook, run it. */
 	if (dpaa_eth_hooks.tx &&
diff --git a/drivers/net/ethernet/freescale/xgmac_mdio.c b/drivers/net/ethernet/freescale/xgmac_mdio.c
index 7b8fe86..cf00101 100644
--- a/drivers/net/ethernet/freescale/xgmac_mdio.c
+++ b/drivers/net/ethernet/freescale/xgmac_mdio.c
@@ -46,6 +46,15 @@ struct tgec_mdio_controller {
 #define MDIO_DATA(x)		(x & 0xffff)
 #define MDIO_DATA_BSY		BIT(31)
 
+
+uint8_t debug=0;
+
+uint16_t CPU_PORT_value[]=
+{
+    0x1140,0x796d,0x0141,0x0c00,0x0de1,0xcc01,0x000d,0x2801,0x6001,0x0200,0x3c00,0x0000,0x0000,0x0003,0x0000,0x3000,
+    0x5b70,0xaf08,0x0000,0x1c40,0x00a0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0040,0x0000,0x0000,0x0000,0x0000,0x0000
+};
+
 struct mdio_fsl_priv {
 	struct	tgec_mdio_controller __iomem *mdio_base;
 	bool	is_little_endian;
@@ -134,6 +143,11 @@ static int xgmac_mdio_write(struct mii_bus *bus, int phy_id, int regnum, u16 val
 	int ret;
 	bool endian = priv->is_little_endian;
 
+	if(debug==1)
+		printk("(%s:%d) mii_bus->name:%s, phy:%d, reg:%d\n\r",__FUNCTION__,__LINE__,bus->name,phy_id,regnum);
+	if(phy_id==8){
+		return 0;
+	}
 	mdio_stat = xgmac_read32(&regs->mdio_stat, endian);
 	if (regnum & MII_ADDR_C45) {
 		/* Clause 45 (ie 10G) */
@@ -190,6 +204,19 @@ static int xgmac_mdio_read(struct mii_bus *bus, int phy_id, int regnum)
 	int ret;
 	bool endian = priv->is_little_endian;
 
+	/*Modify by peter huang, if it is cpu port, it don't support MII, return static value*/
+	if(debug==1)
+		printk("(%s:%d) mii_bus->name:%s, phy:%d, reg:%d\n\r",__FUNCTION__,__LINE__,bus->name,phy_id,regnum);
+
+	if(phy_id==8){
+		if(regnum<32){
+                    
+			return CPU_PORT_value[regnum];
+		}
+		else return 0;
+	}
+
+	/**/
 	mdio_stat = xgmac_read32(&regs->mdio_stat, endian);
 	if (regnum & MII_ADDR_C45) {
 		dev_addr = (regnum >> 16) & 0x1f;
-- 
1.8.3.1

