From cce16682c96751ba960f4f408401950527ef8a7a Mon Sep 17 00:00:00 2001
From: roy_chuang <roy_chuang@edge.core.com>
Date: Thu, 19 Sep 2019 19:14:04 +0800
Subject: [PATCH] Modify FAN duty cycle algorithm. We set duty cycle by
 sequence level, not set to target level by one step.

---
 drivers/hwmon/accton_t600_fan.c | 85 +++++++++++++++++++++++++++++++++++++++--
 1 file changed, 82 insertions(+), 3 deletions(-)

diff --git a/drivers/hwmon/accton_t600_fan.c b/drivers/hwmon/accton_t600_fan.c
index 4032982..49509d6 100755
--- a/drivers/hwmon/accton_t600_fan.c
+++ b/drivers/hwmon/accton_t600_fan.c
@@ -51,6 +51,8 @@ enum fan_duty_cycle {
 #include <linux/kthread.h>
 
 #define FAN_SPEED_CTRL_INTERVAL	3000
+#define FAN_SPEED_DELAY_DEFAULT	3
+#define DUTY_CYCLE_NONE         -1
 #define THERMAL_SENSOR_DATA_LEN 6
 
 #define FAN_REG_LED             16
@@ -196,6 +198,10 @@ struct t600_fan_data {
     struct completion   fanctrl_suspend;
     u8  fanctrl_disabled;
     int temp_input[NUM_OF_THERMAL_SENSOR];  /* The temperature read from thermal sensor(lm75) */
+    int duty_policie_source;
+    int duty_policie_target;
+    int speed_delay_time;
+    int speed_timer_cnt;
 #endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
 };
 
@@ -264,6 +270,7 @@ enum sysfs_fan_attributes {
     FAN_PIU1_DSP2_THERMAL,
     FAN_PIU2_DSP1_THERMAL,
     FAN_PIU2_DSP2_THERMAL,
+    FAN_SPEED_DELAY_TIME,
 #endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
 };
 
@@ -273,6 +280,8 @@ static ssize_t show_fan_ctrl_routine(struct device *dev, struct device_attribute
 static ssize_t disable_fan_ctrl_routine(struct device *dev, struct device_attribute *da, const char *buf, size_t count);
 static ssize_t show_piu_dsp_thermal(struct device *dev, struct device_attribute *da, char *buf);
 static ssize_t set_piu_dsp_thermal(struct device *dev, struct device_attribute *da, const char *buf, size_t count);
+static ssize_t show_speed_delay_time(struct device *dev, struct device_attribute *da, char *buf);
+static ssize_t set_speed_delay_time(struct device *dev, struct device_attribute *da, const char *buf, size_t count);
 
 static SENSOR_DEVICE_ATTR(fan_disable_fanctrl, S_IWUSR | S_IRUGO, show_fan_ctrl_routine,
 										   disable_fan_ctrl_routine, FAN_DISABLE_FANCTRL);
@@ -304,6 +313,7 @@ static SENSOR_DEVICE_ATTR(fan_piu2_dsp2_thermal, S_IWUSR | S_IRUGO, show_piu_dsp
 static SENSOR_DEVICE_ATTR(cpld_version, S_IRUGO, fan_show_value, NULL, CPLD_VERSION);
 static SENSOR_DEVICE_ATTR(fan_watchdog, S_IWUSR | S_IRUGO, fan_show_value, set_fan_watchdog, FAN_WATCHDOG);
 static SENSOR_DEVICE_ATTR(raw_access, S_IWUSR | S_IRUGO, NULL, raw_access, ACCESS);
+static SENSOR_DEVICE_ATTR(pwm_delay_time, S_IWUSR | S_IRUGO, show_speed_delay_time, set_speed_delay_time, FAN_SPEED_DELAY_TIME);
 
 #define DECLARE_FAN_DUTY_CYCLE_SENSOR_DEV_ATTR(index) \
     static SENSOR_DEVICE_ATTR(pwm##index, S_IWUSR | S_IRUGO, fan_show_value, set_duty_cycle, FAN_PWM1)
@@ -400,6 +410,7 @@ static struct attribute *t600_fan_attributes[] = {
     &sensor_dev_attr_fan_piu1_dsp2_thermal.dev_attr.attr,
     &sensor_dev_attr_fan_piu2_dsp1_thermal.dev_attr.attr,
     &sensor_dev_attr_fan_piu2_dsp2_thermal.dev_attr.attr,
+    &sensor_dev_attr_pwm_delay_time.dev_attr.attr,
 #endif
     NULL
 };
@@ -780,6 +791,38 @@ static u8 is_any_fan_failed(struct t600_fan_data *data)
 	return 0;
 }
 
+static ssize_t show_speed_delay_time(struct device *dev, struct device_attribute *da,
+			 char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct t600_fan_data *data = i2c_get_clientdata(client);
+
+	return sprintf(buf, "%d\n", data->speed_delay_time);
+}
+
+static ssize_t set_speed_delay_time(struct device *dev, struct device_attribute *da,
+			const char *buf, size_t count)
+{
+	int error, value;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct t600_fan_data *data = i2c_get_clientdata(client);
+
+	error = kstrtoint(buf, 10, &value);
+	if (error) {
+		return error;
+	}
+	if (value < 0){
+		return -1;
+	}
+
+	/* Delay time is multiple by FAN_SPEED_CTRL_INTERVAL */
+	data->speed_timer_cnt = value / (FAN_SPEED_CTRL_INTERVAL / 1000);
+	data->speed_delay_time = data->speed_timer_cnt * (FAN_SPEED_CTRL_INTERVAL / 1000);
+
+	return count;
+}
+
+
 static ssize_t show_fan_ctrl_routine(struct device *dev, struct device_attribute *da,
 			 char *buf)
 {
@@ -950,9 +993,15 @@ exit:
 
 static void set_fan_speed_by_temp(struct i2c_client *client, struct t600_fan_data *data) {
 	int  i, j, policy_items, old_duty_cycle, new_duty_cycle = 0;
+	int current_duty_cycle = data->reg_val[FAN_PWM1];
 	fan_ctrl_policy_t *policy;
 
-	old_duty_cycle = data->reg_val[FAN_PWM1];
+	if(data->duty_policie_source == DUTY_CYCLE_NONE){
+		old_duty_cycle = current_duty_cycle;
+	}
+	else{
+		old_duty_cycle = data->duty_policie_source;
+	}
 
 	/* Adjust new duty cycle
 	 */
@@ -1001,9 +1050,34 @@ static void set_fan_speed_by_temp(struct i2c_client *client, struct t600_fan_dat
 		return;
 	}
 
-	/* Update duty cycle
+	/* Update duty cycle. We set duty cycle by sequence level.
 	 */
-	fan_set_duty_cycle_to_cpld(client, new_duty_cycle);
+	if(data->duty_policie_source == DUTY_CYCLE_NONE){
+		/* Start setting duty cycle */
+		data->duty_policie_source = old_duty_cycle;
+		data->duty_policie_target = new_duty_cycle;
+		data->speed_timer_cnt= data->speed_delay_time / (FAN_SPEED_CTRL_INTERVAL / 1000);
+		return;
+	}
+	if(data->duty_policie_target == current_duty_cycle){
+		/* Stop setting duty cycle */
+		data->duty_policie_source = DUTY_CYCLE_NONE;
+		data->duty_policie_target = DUTY_CYCLE_NONE;
+		return;
+	}
+	if(data->speed_timer_cnt > 1){
+		data->speed_timer_cnt--;
+		return;
+	}
+
+	data->speed_timer_cnt= data->speed_delay_time / (FAN_SPEED_CTRL_INTERVAL / 1000);
+	if(data->duty_policie_target > data->duty_policie_source){
+		fan_set_duty_cycle_to_cpld(client, current_duty_cycle + 1);
+	}
+	else{
+		fan_set_duty_cycle_to_cpld(client, current_duty_cycle - 1);
+	}
+
 }
 
 static int fan_speed_ctrl_routine(void *arg)
@@ -1139,6 +1213,11 @@ static int t600_fan_probe(struct i2c_client *client,
         status = PTR_ERR(data->fanctrl_tsk);
         goto exit_remove;
     }
+
+    data->speed_delay_time = FAN_SPEED_DELAY_DEFAULT;
+    data->speed_timer_cnt = FAN_SPEED_DELAY_DEFAULT / (FAN_SPEED_CTRL_INTERVAL / 1000);
+    data->duty_policie_source = DUTY_CYCLE_NONE;
+    data->duty_policie_target= DUTY_CYCLE_NONE;
 #endif /* (ENABLE_FAN_CTRL_ROUTINE == 1) */
 
     return 0;
-- 
1.9.1

